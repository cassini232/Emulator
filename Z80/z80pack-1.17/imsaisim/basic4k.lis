Z80-Assembler		Release 1.6				Page 1
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 *HEADING IMSAI 8080 4K BASIC
                       2      2 ;
                       3      3 ; MODIFIED TO WORK WITH SIO-2 TTY
                       4      4 ; OCTOBER 2008, UDO MUNK
                       5      5 ;
                       6      6       ORG   0
                       7      7 ;
                       8      8 ;
0000                   9      9 BASIC EQU   $
0000  21 00 14        10     10       LD    HL,RAM+1024      ;POINT FIRST POSSIBLE END OF RAM
0003  3e fa           11     11       LD    A,0FAH           ;GET MODE SET
0005  c3 49 00        12     12       JP    CONTI            ;GO CONTINUE
                      13     13 ;
                      14     14 ;
                      15     15       ORG   8
0008                  16     16 RST1  EQU   $
                      17     17 ;
                      18     18 ;SKIP CHARS POINTED TO BY HL UNTIL NON-BLANK,
                      19     19 ;LEAVE IN REG A
                      20     20 ;
0008  7e              21     21       LD    A,(HL)           ;LOAD THE BYTE AT (HL)
0009  fe 20           22     22       CP    ' '              ;TEST  IF BLANK
000b  c0              23     23       RET   NZ               ;RETURN IF NOT
000c  23              24     24       INC   HL               ;POINT NEXT
000d  c3 08 00        25     25       JP    RST1             ;LOOP
                      26     26 ;
                      27     27 ;
                      28     28       ORG   16
0010                  29     29 RST2  EQU   $
                      30     30 ;
                      31     31 ;COMPARE STRING AT (HL) TO STRING AT (DE)
                      32     32 ;RETURN IF EQUAL (THRU X'00' IN DE) OR ON FIRST NOT EQUAL
                      33     33 ;IGNORE ALL SPACES
                      34     34 ;
0010  cf              35     35       RST   8                ;SKIP SPACES
0011  1a              36     36       LD    A,(DE)           ;GET CHAR TO MATCH WITH
0012  b7              37     37       OR    A                ;TEST IT
0013  c2 67 0e        38     38       JP    NZ,COMP2         ;BRIF NOT EQUAL
0016  7e              39     39       LD    A,(HL)           ;GET CHAR FOLLOWING
0017  c9              40     40       RET                    ;RETURN
                      41     41 ;
                      42     42 ;
                      43     43       ORG   24
0018                  44     44 RST3  EQU   $
                      45     45 ;
                      46     46 ;PRINT: 'XX ERR @ NNNN'
                      47     47 ;
0018  21 02 10        48     48       LD    HL,IOBUF         ;POINT BUFFER
001b  70              49     49       LD    (HL),B           ;MOVE HI CHAR
001c  23              50     50       INC   HL               ;POINT NEXT
001d  c3 42 0f        51     51       JP    ERROR            ;CONTINUE ELSEWHERE
                      52     52 ;
                      53     53 ;
                      54     54       ORG   32
0020                  55     55 RST4  EQU   $
                      56     56 ;
                      57     57 ;SHIFT THE LOW ORDER 4 BITS OF REG A TO THE HIGH 4 BITS
                      58     58 ;
0020  e6 0f           59     59       AND   0FH              ;ISOLATE LOW 4
0022  17              60     60       RLA                    ;SHIFT ONE BIT
Z80-Assembler		Release 1.6				Page 2
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0023  17              61     61       RLA                    ;AGAIN
0024  17              62     62       RLA                    ;AGAIN
0025  17              63     63       RLA                    ;ONE LAST TIME
0026  c9              64     64       RET                    ;RETURN
                      65     65 ;
                      66     66 ;
                      67     67       ORG   40
0028                  68     68 RST5  EQU   $
                      69     69 ;
                      70     70 ;LOAD THE FLOATING POINT ACCUMULATOR WITH THE 4 BYTES AT (HL)
                      71     71 ;
0028  11 2a 10        72     72       LD    DE,FACC          ;POINT FLOAT ACC
002b  06 04           73     73       LD    B,4              ;BYTE COUNT
002d  c3 58 0e        74     74       JP    COPYH            ;GO MOVE IT
                      75     75 ;
                      76     76 ;
                      77     77       ORG 48
0030                  78     78 RST6  EQU   $
                      79     79 ;
                      80     80 ;STORE THE FLOATING POINT ACCUMULATOR AT (HL)
                      81     81 ;
0030  11 2a 10        82     82       LD    DE,FACC          ;POINT FLOAT ACC
0033  06 04           83     83       LD    B,4              ;BYTE COUNT
0035  c3 61 0e        84     84       JP    COPYD            ;GO MOVE IT
                      85     85 ;
                      86     86 ;
                      87     87       ORG   56
0038                  88     88 RST7  EQU   $
                      89     89 ;
                      90     90 ;INCREMENT HL BY BYTE AT (SP), RETURN TO (SP)+1
                      91     91 ;
0038  e3              92     92       EX    (SP),HL          ;GET RETURN ADDR IN HL
0039  7e              93     93       LD    A,(HL)           ;GET THE INCREMENT
003a  23              94     94       INC   HL               ;POINT TRUE RETURN
003b  e3              95     95       EX    (SP),HL          ;PUT BACK TO STACK
003c  d5              96     96       PUSH  DE               ;SAVE DE
003d  5f              97     97       LD    E,A              ;PUT IT IN LOW
003e  b7              98     98       OR    A                ;TEST SIGN
003f  16 00           99     99       LD    D,0              ;DEFAULT POSITIVE
0041  f2 46 00       100    100       JP    P,RST7A          ;BRIF +
0044  16 ff          101    101       LD    D,0FFH           ;ELSE, NEG
0046  19             102    102 RST7A ADD   HL,DE            ;BUMP HL
0047  d1             103    103       POP   DE               ;RESTORE DE
0048  c9             104    104       RET                    ;RETURN
                     105    105 ;
                     106    106 ;
                     107    107 ;
0049                 108    108 CONTI EQU   $
                     109    109 ;
                     110    110 ;INITIALIZATION ROUTINE
                     111    111 ;DETERMINE MEMORY SIZE. (START AT 4K AND TRY 1K INCREMENTS)
                     112    112 ;SETUP POINTERS FOR STACK, DATA, AND PROGRAM
                     113    113 ;INIT SIO BOARD
                     114    114 ;
0049  d3 03          115    115       OUT   (TTY+1),A        ;WRITE TO SIO
004b  3e 17          116    116       LD    A,17H            ;CMND: DTR, ENABLE TRNS, & RCVR,
004d  d3 03          117    117       OUT   (TTY+1),A        ;WRITE TO SIO
004f  01 00 04       118    118       LD    BC,1024          ;1K INCR
0052                 119    119 FINDL EQU   $
0052  7e             120    120       LD    A,(HL)           ;GET A BYTE FROM MEMORY
Z80-Assembler		Release 1.6				Page 3
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0053  2f             121    121       CPL                    ;COMPLEMENT
0054  77             122    122       LD    (HL),A           ;REPLACE
0055  be             123    123       CP    (HL)             ;TEST IF RAM/ROM/END
0056  c2 5f 00       124    124       JP    NZ,MEMEN         ;BRIF OUT OF RAM
0059  2f             125    125       CPL                    ;RE-COMPLEMENT
005a  77             126    126       LD    (HL),A           ;PUT ORIG BACK
005b  09             127    127       ADD   HL,BC            ;POINT NEXT 1K BLOCK
005c  d2 52 00       128    128       JP    NC,FINDL         ;LOOP TILL 64K
005f  f9             129    129 MEMEN LD    SP,HL            ;SET STACK POINTER TO END OF MEMORY
0060  ff             130    130       RST   RST7             ;GO BUMP HL ADDR
0061  9c             131    131       DEFB  -100             ;ALLOW 100 BYTES
0062  22 18 11       132    132       LD    (DATAB),HL       ;SAVE ADDR OF START OF DATA
0065  af             133    133       XOR   A                ;GET A ZERO IN A
0066  77             134    134       LD    (HL),A           ;MARK EMPTY DATA
0067  32 61 10       135    135       LD    (OUTSW),A        ;TURN OUTPUT SUPPRESS OFF
006a  f5             136    136       PUSH  AF               ;SET STACK 1 LEVEL DEEP WITHOUT
006b  21 00 00       137    137       LD    HL,0             ;CLEAR HL
006e  39             138    138       ADD   HL,SP            ;SP TO HL
006f  22 6c 10       139    139       LD    (STACK),HL       ;SAVE BEG OF STACK
0072  21 1c 11       140    140       LD    HL,BEGPR-1       ;POINT ONE BEFORE START OF PROGRAM
0075  77             141    141       LD    (HL),A           ;MARK EMPTY
0076  21 fc 0f       142    142       LD    HL,RNDX          ;POINT INIT RND NUMBER
0079  ef             143    143       RST   RST5             ;GO LOAD TO FACC
007a  21 64 10       144    144       LD    HL,RNDNU         ;POINT RAM AREA
007d  f7             145    145       RST   RST6             ;GO STORE
007e  21 00 10       146    146       LD    HL,RAM           ;POINT 1 BEFORE IOBUFF
0081  36 ff          147    147       LD    (HL),0FFH        ;SET HIGH VALUE
0083  cd d1 0a       148    148 GENRN CALL  RND              ;GO GENERATE A RANDUM NUMBER
0086  db 03          149    149       IN    A,(TTY+1)        ;GET TTY STATUS
0088  e6 02          150    150       AND   2                ;ISOLATE RXRDY
008a  ca 83 00       151    151       JP    Z,GENRN
                     152    152 *HEADING IMSAI 8080 4K BASIC
008d                 153    153 READY EQU   $
                     154    154 ;
                     155    155 ;
                     156    156 ;COMMAND INPUT ROUTINE
                     157    157 ;
                     158    158 ;READ A LINE FROM THE TTY
                     159    159 ;IF STARTS WITH NUMERIC CHARACTERS, ASSUME IT'S A BASIC STA
                     160    160 ;IF NOT, THEN IT IS EITHER AN IMMEDIATE STATEMENT OR A COM
                     161    161 ;
008d  af             162    162 GETCM XOR   A                ;SET NO PROMPT
008e  2a 6c 10       163    163       LD    HL,(STACK)       ;GET STACK ADDRESS
0091  f9             164    164       LD    SP,HL            ;SET REG SP
0092  cd 59 0d       165    165       CALL  TERMI            ;GET A LINE
0095  cd 8e 0e       166    166       CALL  PACK             ;GO PACK THE NUMBER INTO BC
0098  78             167    167       LD    A,B              ;GET HI BYTE OF LINE NUMBER
0099  b1             168    168       OR    C                ;PLUS LOW BYTE
009a  ca 23 01       169    169       JP    Z,EXEC           ;BRIF EXEC STATEMENT
009d  c5             170    170       PUSH  BC               ;SAVE LINE NUMBER
009e  11 d1 10       171    171       LD    DE,IMMED+1       ;POINT SAVE AREA
00a1  eb             172    172       EX    DE,HL            ;FLIP/FLOP
00a2  70             173    173       LD    (HL),B           ;PUT LO LINE
00a3  23             174    174       INC   HL               ;POINT NEXT
00a4  71             175    175       LD    (HL),C           ;PUT LO LINE
00a5  23             176    176       INC   HL               ;POINT NEXT
00a6  06 03          177    177       LD    B,3              ;INIT COUNT
00a8  1a             178    178 EDIT1 LD    A,(DE)           ;GET A BYTE
00a9  77             179    179       LD    (HL),A           ;PUT IT DOWN
00aa  04             180    180       INC   B                ;COUNT IT
Z80-Assembler		Release 1.6				Page 4
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
00ab  23             181    181       INC   HL               ;POINT NEXT
00ac  13             182    182       INC   DE               ;DITTO
00ad  b7             183    183       OR    A                ;TEST BYTE JUST MOVED
00ae  c2 a8 00       184    184       JP    NZ,EDIT1         ;LOOP
00b1  78             185    185       LD    A,B              ;GET COUNT
00b2  32 d0 10       186    186       LD    (IMMED),A        ;STORE THE COUNT
00b5  c1             187    187       POP   BC               ;GET LINE NUMBER
00b6  21 1d 11       188    188       LD    HL,BEGPR         ;POINT BEGINNING OF PROGRAM
00b9  7e             189    189 EDIT2 LD    A,(HL)           ;GET LEN CODE
00ba  e5             190    190       PUSH  HL               ;SAVE ADDR
00bb  b7             191    191       OR    A                ;TEST IT
00bc  ca f2 00       192    192       JP    Z,EDIT5          ;BRIF END
00bf  23             193    193       INC   HL               ;POINT HI LINE
00c0  7e             194    194       LD    A,(HL)           ;LOAD IT
00c1  b8             195    195       CP    B                ;COMPARE
00c2  da e5 00       196    196       JP    C,EDIT4          ;BRIF LOW
00c5  c2 f2 00       197    197       JP    NZ,EDIT5         ;EDIT5 BRIF HIGH
00c8  23             198    198       INC   HL               ;POINT LO LINE
00c9  7e             199    199       LD    A,(HL)           ;LOAD IT
00ca  b9             200    200       CP    C                ;COMPARE
00cb  da e5 00       201    201       JP    C,EDIT4          ;BRIF LOW
00ce  c2 f2 00       202    202       JP    NZ,EDIT5         ;BRIF HIGH
00d1  2b             203    203       DEC   HL               ;POINT BACK
00d2  2b             204    204       DEC   HL               ;TO BEGIN
00d3  54             205    205       LD    D,H              ;COPY ADDR
00d4  5d             206    206       LD    E,L              ;TO DE
00d5  06 00          207    207       LD    B,0              ;GET A ZERO
00d7  4e             208    208       LD    C,(HL)           ;GET LEN
00d8  09             209    209       ADD   HL,BC            ;POINT NEXT STMT
00d9  7e             210    210 EDIT3 LD    A,(HL)           ;GET LEN NEXT STMT
00da  b7             211    211       OR    A                ;TEST IT
00db  ca ed 00       212    212       JP    Z,EDITX          ;BRIF END
00de  47             213    213       LD    B,A              ;SET LENGTH
00df  cd 58 0e       214    214       CALL  COPYH            ;ELSE MOVE LINE
00e2  c3 d9 00       215    215       JP    EDIT3            ;LOOP
00e5  e1             216    216 EDIT4 POP   HL               ;GET ADDR
00e6  16 00          217    217       LD    D,0              ;ZERO HI LEN
00e8  5e             218    218       LD    E,(HL)           ;GET LO LEN
00e9  19             219    219       ADD   HL,DE            ;COMPUTE ADDR NEXT LINE
00ea  c3 b9 00       220    220       JP    EDIT2            ;LOOP
00ed  eb             221    221 EDITX EX    DE,HL            ;PUT NEW ADDR TO HL
00ee  77             222    222       LD    (HL),A           ;MARK END
00ef  22 1a 11       223    223       LD    (PROGE),HL       ;AND UPDATE ADDRESS
00f2  3a d0 10       224    224 EDIT5 LD    A,(IMMED)        ;GET LEN OF INSERT
00f5  fe 04          225    225       CP    4                ;TEST IF DELETE
00f7  ca 8d 00       226    226       JP    Z,GETCM          ;BRIF IS
00fa  4f             227    227       LD    C,A              ;SET LO LEN
00fb  06 00          228    228       LD    B,0              ;ZERO HI LEN
00fd  2a 1a 11       229    229       LD    HL,(PROGE)       ;GET END OF PROG
0100  54             230    230       LD    D,H              ;COPY TO
0101  5d             231    231       LD    E,L              ;DE
0102  09             232    232       ADD   HL,BC            ;DISP LEN OF INSERT
0103  22 1a 11       233    233       LD    (PROGE),HL       ;UPDATE END POINT
0106  c1             234    234       POP   BC               ;GET ADDR
0107  1a             235    235 EDIT6 LD    A,(DE)           ;GET A BYTE
0108  77             236    236       LD    (HL),A           ;COPY IT
0109  1b             237    237       DEC   DE               ;POINT PRIOR
010a  2b             238    238       DEC   HL               ;DITTO
010b  7a             239    239       LD    A,D              ;GET HI ADDR
010c  b8             240    240       CP    B                ;COMPARE
Z80-Assembler		Release 1.6				Page 5
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
010d  ca 13 01       241    241       JP    Z,EDIT7          ;BRIF HI EQUAL
0110  d2 07 01       242    242       JP    NC,EDIT6         ;BRIF NOT LESS
0113  7b             243    243 EDIT7 LD    A,E              ;GET LO ADDR
0114  b9             244    244       CP    C                ;COMPARE
0115  d2 07 01       245    245       JP    NC,EDIT6         ;BRIF NOT LESS
0118  13             246    246       INC   DE               ;POINT FORWARD
0119  21 d0 10       247    247       LD    HL,IMMED         ;POINT INSERT
011c  46             248    248       LD    B,(HL)           ;GET LENGTH
011d  cd 58 0e       249    249       CALL  COPYH            ;GO MOVE IT
0120  c3 8d 00       250    250       JP    GETCM            ;GO COMMAND
                     251    251 *HEADING IMSAI 8080 4K BASIC
0123                 252    252 EXEC  EQU   $
                     253    253 ;
                     254    254 ;
                     255    255 ;
                     256    256 ;DECODE COMMAND IN IOBUFF
                     257    257 ;EXECUTE IF POSSIBLE
                     258    258 ;THEN GOTO GET NEXT COMMAND
                     259    259 ;
                     260    260 ;
0123  11 64 0f       261    261       LD    DE,NEWLI         ;POINT "NEW"
0126  21 02 10       262    262       LD    HL,IOBUF         ;POINT BUFFER
0129  d7             263    263       RST   RST2             ;GO COMPARE
012a  c2 3c 01       264    264       JP    NZ,NOTSC         ;BRIF NOT
012d  21 1d 11       265    265       LD    HL,BEGPR         ;POINT BEGINNING OF PGM
0130  22 1a 11       266    266       LD    (PROGE),HL       ;SAVE END ADDRESS
0133  af             267    267       XOR   A                ;GET A ZERO
0134  77             268    268       LD    (HL),A           ;MARK EMPTY
0135  2a 18 11       269    269       LD    HL,(DATAB)       ;POINT BEGINNING OF DATA
0138  77             270    270       LD    (HL),A           ;MARK EMPTY
0139  c3 8d 00       271    271       JP    READY            ;GO GET NEXT COMMAND
013c  11 60 0f       272    272 NOTSC LD    DE,LISTL         ;POINT LITERAL
013f  21 02 10       273    273       LD    HL,IOBUF         ;POINT BUFFER
0142  d7             274    274       RST   RST2             ;GO COMPARE
0143  ca d3 01       275    275       JP    Z,LIST           ;BRIF 'LIST'
0146  11 68 0f       276    276       LD    DE,RUNLI         ;POINT LITERAL
0149  21 02 10       277    277       LD    HL,IOBUF         ;POINT BUFFER
014c  d7             278    278       RST   RST2             ;GO COMPARE
014d  ca 6d 01       279    279       JP    Z,RUNIT          ;BRIF 'RUN'
0150  32 62 10       280    280       LD    (RUNSW),A        ;SET IMMEDIATE MODE
0153  21 02 10       281    281       LD    HL,IOBUF         ;POINT STMT
0156  11 d0 10       282    282       LD    DE,IMMED         ;POINT NEW AREA
0159  7e             283    283 IMED  LD    A,(HL)           ;GET A BYTE
015a  12             284    284       LD    (DE),A           ;PUT TO D
015b  13             285    285       INC   DE               ;POINT NEXT
015c  23             286    286       INC   HL               ;DITTO
015d  b7             287    287       OR    A                ;TEST IF END
015e  c2 59 01       288    288       JP    NZ,IMED          ;LOOP
0161  21 00 10       289    289       LD    HL,NULLI         ;POINT FFFF
0164  22 6a 10       290    290       LD    (LINE),HL        ;SAVE ADDR
0167  21 d0 10       291    291       LD    HL,IMMED         ;POINT START OF CMMD
016a  c3 a2 01       292    292       JP    IMMD             ;GO IMMEDIATE
                     293    293 *HEADING IMSAI 8080 4K BASIC
016d                 294    294 RUNIT EQU   $
                     295    295 ;
                     296    296 ;
                     297    297 ;RUN PROCESSOR, GET NEXT STATEMENT, AND EXECUTE IT
                     298    298 ;IF IN IMMEDIATE MODE, THEN RETURN TO GETCMMD
                     299    299 ;
                     300    300 ;
Z80-Assembler		Release 1.6				Page 6
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
016d  af             301    301       XOR   A                ;CLEAR A REG
016e  32 62 10       302    302       LD    (RUNSW),A        ;RESET SWITCH
0171  32 6e 10       303    303       LD    (FORNE),A        ;INIT FOR/NEXT TABLE
0174  2a 18 11       304    304       LD    HL,(DATAB)       ;POINT START OF VARIABLES
0177  36 00          305    305       LD    (HL),0           ;CLEAR IT
0179  21 1c 11       306    306       LD    HL,BEGPR-1       ;GET ADDR OF PROGRAM
017c  22 16 11       307    307       LD    (DATAP),HL       ;'RESTORE'
017f  23             308    308       INC   HL               ;POINT 1ST BYTE
0180  22 5d 10       309    309       LD    (STMT),HL        ;SAVE IT
0183  c3 90 01       310    310       JP    NEXTS            ;GO PROCESS IT
                     311    311 ;
0186  2a 5d 10       312    312 RUN   LD    HL,(STMT)        ;GET ADDR OF PREVIOUS STMT
0189  5e             313    313       LD    E,(HL)           ;GET LEN CODE
018a  16 00          314    314       LD    D,0              ;CLEAR HIGH BYTE OF ADDR
018c  19             315    315       ADD   HL,DE            ;INCR STMT POINTER
018d  22 5d 10       316    316       LD    (STMT),HL        ;SAVE IT
                     317    317 ;
0190                 318    318 NEXTS EQU   $
0190  3a 62 10       319    319       LD    A,(RUNSW)        ;GET RUN TYPE
0193  b7             320    320       OR    A                ;TEST IT
0194  c2 8d 00       321    321       JP    NZ,GETCM         ;BRIF IMMEDIATE MODE
0197  7e             322    322       LD    A,(HL)           ;GET LEN CODE
0198  b7             323    323       OR    A                ;SEE IF NO MORE STATEMENTS
0199  ca 8d 00       324    324       JP    Z,READY          ;BRIF END
019c                 325    325 NOTDO EQU   $
019c  23             326    326       INC   HL               ;POINT LINE NUMBER
019d  22 6a 10       327    327       LD    (LINE),HL        ;SAVE ADDR
01a0  23             328    328       INC   HL               ;POINT 2ND BYTE
01a1  23             329    329       INC   HL               ;POINT 1ST PGM BYTE
01a2  cf             330    330 IMMD  RST   RST1             ;SKIP BLANKS
01a3  22 57 10       331    331 CONTX LD    (ADDR1),HL       ;SAVE ADDR
01a6  cd 2e 0e       332    332       CALL  TSTCH            ;GO SEE IF CONTROL-C
01a9  11 7c 0f       333    333       LD    DE,JMPTB         ;POINT TO TABLE
01ac  1a             334    334 TABLO LD    A,(DE)           ;GET FIRST BYTE OF LIT
01ad  b7             335    335       OR    A                ;TEST IF END OF TABLE
01ae  ca cd 01       336    336       JP    Z,TABEN          ;BRIF IS
01b1  2a 57 10       337    337       LD    HL,(ADDR1)       ;GET ADDRESS OF CMMD
01b4  d7             338    338       RST   RST2             ;GO COMPARE
01b5  c2 c1 01       339    339       JP    NZ,NOJMP         ;BRIF NOT EQUAL
01b8  e5             340    340       PUSH  HL               ;SAVE HL
01b9  13             341    341       INC   DE               ;POINT NEXT BYTE
01ba  1a             342    342       LD    A,(DE)           ;LOAD IT
01bb  6f             343    343       LD    L,A              ;LOW BYTE TOL
01bc  13             344    344       INC   DE               ;POINT NEXT BYTE
01bd  1a             345    345       LD    A,(DE)           ;LOAD IT
01be  67             346    346       LD    H,A              ;HIGH BYTE TO H
01bf  e3             347    347       EX    (SP),HL          ;HL TO STACK, STACK TO HL
01c0  c9             348    348       RET                    ;JUMP TO PROPER ROUTINE
01c1  13             349    349 NOJMP INC   DE               ;POINT NEXT
01c2  1a             350    350       LD    A,(DE)           ;LOAD IT
01c3  b7             351    351       OR    A                ;TEST IT
01c4  c2 c1 01       352    352       JP    NZ,NOJMP         ;BRIF NOT
01c7  13             353    353       INC   DE               ;POINT NEXT
01c8  13             354    354       INC   DE               ;DITTO
01c9  13             355    355       INC   DE               ;POINT FIRST BYTE NEXT LIT
01ca  c3 ac 01       356    356       JP    TABLO            ;LOOP
                     357    357 ;
01cd  2a 57 10       358    358 TABEN LD    HL,(ADDR1)       ;RESTORE HL POINTER
01d0  c3 1a 04       359    359       JP    LET              ;ASSUME IT'S A LET STATEMENT
                     360    360 *HEADING IMSAI 8080 4K BASIC
Z80-Assembler		Release 1.6				Page 7
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
01d3                 361    361 LIST  EQU   $
                     362    362 ;
                     363    363 ;
                     364    364 ;LIST PROCESSOR
                     365    365 ;DUMP THE SOURCE PROGRAM TO TTY OR PAPER TAPE
                     366    366 ;
                     367    367 ;
01d3  21 1d 11       368    368       LD    HL,BEGPR         ;POINT BEGINNING OF PROGRAM
01d6  7e             369    369 LISTX LD    A,(HL)           ;GET LEN CODE
01d7  b7             370    370       OR    A                ;TEST IF END OF PGM
01d8  ca 8d 00       371    371       JP    Z,READY          ;BRIF END OF PGM
01db  d6 03          372    372       SUB   3                ;SUBTRACT THREE
01dd  47             373    373       LD    B,A              ;SAVE LEN
01de  23             374    374       INC   HL               ;POINT HI BYTE OF LINE #
01df  11 02 10       375    375       LD    DE,IOBUF         ;POINT BUFFER AREA
01e2  cd 1a 0e       376    376       CALL  LINEO            ;CONVERT LINE NUMBER
01e5  cd 58 0e       377    377       CALL  COPYH            ;GO MOVE THE LINE
01e8  cd 2e 0e       378    378       CALL  TSTCH            ;GO SEE IF CONTROL-C
01eb  e5             379    379       PUSH  HL               ;SAVE HL ADDR
01ec  cd f5 0d       380    380       CALL  TERMO            ;GO TYPE IT
01ef  e1             381    381       POP   HL               ;RETREIVE H ADDR
01f0  c3 d6 01       382    382       JP    LISTX            ;CONTINUE
                     383    383 ;
                     384    384 *HEADING IMSAI 8080 4K BASIC
01f3                 385    385 GOSUB EQU   $
                     386    386 ;
                     387    387 ;
                     388    388 ; STMT:  GOSUB NNNN
                     389    389 ;
01f3  eb             390    390       EX    DE,HL            ;FLIP/FLOP DE HL
01f4  2a 5d 10       391    391       LD    HL,(STMT)        ;GET STATEMENT ADDRESS
01f7  e5             392    392       PUSH  HL               ;SAVE RETURN ADDRESS IN STACK
01f8  3e ff          393    393       LD    A,0FFH           ;MARK AS GOSUB
01fa  f5             394    394       PUSH  AF               ;SAVE STATUS
01fb  eb             395    395       EX    DE,HL            ;RESTORE HL
                     396    396 ;
                     397    397 ;
01fc                 398    398 GOTO  EQU   $
                     399    399 ;
                     400    400 ;
                     401    401 ; STMT:  GOTO NNNN
                     402    402 ;
01fc  cd 8e 0e       403    403       CALL  PACK             ;GO GET LINE NUMBER IN BC
01ff  21 1d 11       404    404       LD    HL,BEGPR         ;POINT BEGINNING OF PROGRAM
0202  7e             405    405 GOTO1 LD    A,(HL)           ;GET LEN
0203  b7             406    406       OR    A                ;TEST IF END OF PROGRAM
0204  ca 6e 0e       407    407       JP    Z,ULERR          ;BRIF UNDEFIND STATEMENT
0207  23             408    408       INC   HL               ;POINT NEXT
0208  7e             409    409       LD    A,(HL)           ;GET THE HIGH LINE NUMBER
0209  b8             410    410       CP    B                ;TEST WITH DESIRED
020a  da 1e 02       411    411       JP    C,GOTO2          ;BRIF LOW
020d  23             412    412       INC   HL               ;POINT NEXT BYTE
020e  7e             413    413       LD    A,(HL)           ;GET LOW LINE NUMBER
020f  2b             414    414       DEC   HL               ;POINT BACK
0210  b9             415    415       CP    C                ;TEST WITH WANTED
0211  da 1e 02       416    416       JP    C,GOTO2          ;BRIF LOW
0214  c2 6e 0e       417    417       JP    NZ,ULERR         ;BRIF LINE MISSING
0217  2b             418    418       DEC   HL               ;POINT TO START OF STMT
0218  22 5d 10       419    419       LD    (STMT),HL        ;SAVE ADDR
021b  c3 90 01       420    420       JP    NEXTS            ;GO PROCESS THE STATEMENT
Z80-Assembler		Release 1.6				Page 8
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
021e  2b             421    421 GOTO2 DEC   HL               ;POINT START OF STMT
021f  5e             422    422       LD    E,(HL)           ;GET LENGTH
0220  16 00          423    423       LD    D,0              ;ZERO MDB
0222  19             424    424       ADD   HL,DE            ;POINT NEXT STMT
0223  c3 02 02       425    425       JP    GOTO1            ;LOOP
                     426    426 *HEADING IMSAI 8080 4K BASIC
0226                 427    427 RETUR EQU   $
                     428    428 ;
                     429    429 ;
                     430    430 ; STMT:  RETURN
                     431    431 ;
0226  f1             432    432       POP   AF               ;POP THE STACK
0227  fe ff          433    433       CP    0FFH             ;TEST IF GOSUB IN EFFECT
0229  c2 7e 0e       434    434       JP    NZ,RTERR         ;BRIF ERROR
022c  e1             435    435       POP   HL               ;GET RETURNED STATEMENT ADDRESS
022d  22 5d 10       436    436       LD    (STMT),HL        ;RESTORE
0230  c3 86 01       437    437       JP    RUN              ;CONTINUE AT STMT FOLLOWING GOSUB
                     438    438 *HEADING IMSAI 8080 4K BASIC
0233                 439    439 PRINT EQU   $
                     440    440 ;
                     441    441 ;
                     442    442 ; STMT:  PRINT . . . .
                     443    443 ;
                     444    444 ;
0233  af             445    445       XOR   A                ;CLEAR REG A
0234  32 56 10       446    446       LD    (PRSW),A         ;SET SWITCH
0237  11 02 10       447    447 PR1   LD    DE,IOBUF         ;POINT BUFFER
023a  cf             448    448       RST   RST1             ;SKIP TO NEXT FIELD
023b  fe 22          449    449       CP    '"'              ;TEST IF QUOTE
023d  c2 66 02       450    450       JP    NZ,PR6           ;BRIF NOT LITERAL
0240  23             451    451 PR2   INC   HL               ;POINT NEXT
0241  7e             452    452       LD    A,(HL)           ;GET THE CHAR
0242  b7             453    453       OR    A                ;TEST IF END OF STMT
0243  ca 7a 0e       454    454       JP    Z,SNERR          ;BRIF MISSING END OF QUOTE
0246  fe 22          455    455 PR3   CP    '"'              ;TEST IF END QUOTE
0248  c2 61 02       456    456       JP    NZ,PR5           ;BRIF NOT
024b  23             457    457       INC   HL               ;POINT NEXT
024c  3e fe          458    458 PRNXT LD    A,0FEH           ;SET CODE = NO CR/LF
024e  12             459    459       LD    (DE),A           ;PUT TO BUFFER
024f  e5             460    460       PUSH  HL               ;SAVE HL
0250  cd f5 0d       461    461       CALL  TERMO            ;GO PRINT IT
0253  e1             462    462       POP   HL               ;RESTORE HL
0254  c3 33 02       463    463       JP    PRINT            ;RECURSIVE TO NEXT FIELD
0257  3a 56 10       464    464 PR4   LD    A,(PRSW)         ;GET SWITCH
025a  b7             465    465       OR    A                ;TEST IF STMT ENDED WITH , OR ;
025b  cc ba 0d       466    466       CALL  Z,CRLF           ;CALL IF NOT
025e  c3 86 01       467    467       JP    RUN              ;CONTINUE NEXT STMT
0261  12             468    468 PR5   LD    (DE),A           ;PUT CHAR TO BUFFER
0262  13             469    469       INC   DE               ;POINT NEXT OUT
0263  c3 40 02       470    470       JP    PR2              ;LOOP
0266  b7             471    471 PR6   OR    A                ;TEST IF END OF STMT
0267  ca 57 02       472    472       JP    Z,PR4            ;BRIF IT IS
026a  fe 2c          473    473       CP    ','              ;TEST IF COMMA
026c  ca 87 02       474    474       JP    Z,PR7            ;BRIF IT IS
026f  fe 3b          475    475       CP    ';'              ;TEST IF SEMI-COLON
0271  ca ad 02       476    476       JP    Z,PR8            ;BRIF IT IS
0274  d5             477    477       PUSH  DE               ;SAVE DE
0275  cd ef 0a       478    478       CALL  EXPR             ;GO EVALUATE EXPRESSION
0278  d1             479    479       POP   DE               ;RESTORE DE
0279  e5             480    480       PUSH  HL               ;SAVE HL
Z80-Assembler		Release 1.6				Page 9
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
027a  eb             481    481       EX    DE,HL            ;FLIP/FLOP
027b  cd 07 06       482    482       CALL  FOUT             ;GO CONVERT OUTPUT
027e  23             483    483       INC   HL               ;POINT NEXT
027f  36 20          484    484       LD    (HL),' '         ;SPACE FOLLOWS NUMBERS
0281  23             485    485       INC   HL               ;POINT NEXT
0282  eb             486    486       EX    DE,HL            ;FLIP/FLOP
0283  e1             487    487       POP   HL               ;RESTORE HL
0284  c3 4c 02       488    488       JP    PRNXT            ;CONTINUE
0287  3a 63 10       489    489 PR7   LD    A,(COLUM)        ;GET COLUMN POINTER
028a  fe 38          490    490       CP    56               ;COMPARE TO 56
028c  d2 b4 02       491    491       JP    NC,TBEND         ;BRIF NO ROOM LEFT
028f  47             492    492       LD    B,A              ;SAVE IT
0290  af             493    493       XOR   A                ;INIT POSITION
0291  b8             494    494 TBLP  CP    B                ;COMPARE
0292  ca 98 02       495    495       JP    Z,TBLP2          ;BRIF ON A TAB STOP
0295  d2 9d 02       496    496       JP    NC,TBON          ;BRIF SHY OF TAB
0298  c6 0e          497    497 TBLP2 ADD   A,14             ;POINT NEXT STOP
029a  c3 91 02       498    498       JP    TBLP             ;LOOP
029d  32 63 10       499    499 TBON  LD    (COLUM),A        ;UPDATE CTR
02a0  90             500    500       SUB   B                ;COMPUTE NUMBER OF SPACES
02a1  47             501    501       LD    B,A              ;SAVE IT
02a2  cd a5 0d       502    502 TBSPA CALL  TESTO            ;WAIT TILL READY
02a5  3e 20          503    503       LD    A,' '            ;SPACE TO REG A
02a7  d3 02          504    504       OUT   (TTY),A          ;OUTPUT IT
02a9  05             505    505       DEC   B                ;SUB 1 FROM CTR
02aa  c2 a2 02       506    506       JP    NZ,TBSPA         ;LOOP IF NOT
02ad  23             507    507 PR8   INC   HL               ;POINT NEXT
02ae  32 56 10       508    508       LD    (PRSW),A         ;SET THE SWITCH
02b1  c3 37 02       509    509       JP    PR1              ;GO NEXT FIELD
02b4  cd ba 0d       510    510 TBEND CALL  CRLF             ;PUT CR/LF
02b7  c3 ad 02       511    511       JP    PR8              ;GO SET SW
                     512    512 *HEADING IMSAI 8080 4K BASIC
02ba                 513    513 FOR   EQU   $
                     514    514 ;
                     515    515 ;
                     516    516 ; STMT:  FOR VAR = EXPR TO EXPR :STEP EXPR:
                     517    517 ;
                     518    518 ;
02ba  cd 30 0f       519    519       CALL  VAR              ;NEXT WORD MUST BE VARIABLE
02bd  eb             520    520       EX    DE,HL            ;FLIP/FLOP
02be  22 5f 10       521    521       LD    (INDX),HL        ;SAVE VARIABLE NAME
02c1  eb             522    522       EX    DE,HL            ;FLIP/FLOP AGAIN
02c2  fe 3d          523    523       CP    '='              ;TEST FOR EQUAL SIGN
02c4  c2 7a 0e       524    524       JP    NZ,SNERR         ;BRIF NO EQUAL
02c7  23             525    525       INC   HL               ;POINT NEXT
02c8  cd ef 0a       526    526       CALL  EXPR             ;GO EVALUATE EXPR IF ANY
02cb  e5             527    527       PUSH  HL               ;SAVE HL
02cc  2a 5f 10       528    528       LD    HL,(INDX)        ;GET INDEX NAME
02cf  eb             529    529       EX    DE,HL            ;FLIP/FLOP
02d0  cd fe 0e       530    530       CALL  SEARC            ;GO LOCATE NAME
02d3  eb             531    531       EX    DE,HL            ;PUT ADDR IN HL
02d4  22 57 10       532    532       LD    (ADDR1),HL       ;SAVE ADDR
02d7  f7             533    533       RST   RST6             ;GO STORE THE VALUE
02d8  e1             534    534       POP   HL               ;RESTORE POINTER TO STMT
02d9  11 c0 0f       535    535       LD    DE,TOLIT         ;GET LIT ADDR
02dc  d7             536    536       RST   RST2             ;GO COMPARE
02dd  c2 7a 0e       537    537       JP    NZ,SNERR         ;BRIF ERROR
02e0  cd ef 0a       538    538       CALL  EXPR             ;GO EVALUATE TO-EXPR
02e3  e5             539    539       PUSH  HL               ;SAVE HL
02e4  21 3a 10       540    540       LD    HL,TVAR1         ;POINT SAVE AREA
Z80-Assembler		Release 1.6				Page 10
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
02e7  f7             541    541       RST   RST6             ;SAVE 'TO' EXPR
02e8  21 f0 0f       542    542       LD    HL,ONE           ;POINT CONSTANT: 1
02eb  ef             543    543       RST   RST5             ;LOAD IT
02ec  e1             544    544       POP   HL               ;RESTORE HL
02ed  7e             545    545       LD    A,(HL)           ;GET THAT CHAR
02ee  b7             546    546       OR    A                ;TEST FOR END OF STATEMENT
02ef  ca fc 02       547    547       JP    Z,NOSTP          ;BRIF NO STEP
02f2  11 de 0f       548    548       LD    DE,STEPL         ;TEST FOR LIT STEP
02f5  d7             549    549       RST   RST2             ;GO COMPARE
02f6  c2 7a 0e       550    550       JP    NZ,SNERR         ;BRIF NOT STEP
02f9  cd ef 0a       551    551 FORST CALL  EXPR             ;GO EVAL STEP
02fc  21 3e 10       552    552 NOSTP LD    HL,TVAR2         ;GET ADDR OF TEMP VARIABLE
02ff  f7             553    553       RST   RST6             ;SAVE END VALUE
0300  cd 9e 09       554    554       CALL  FTEST            ;GET SIGN OF FACC
0303  f5             555    555       PUSH  AF               ;SAVE A, STATUS
0304  21 3a 10       556    556       LD    HL,TVAR1         ;GET END VALUE
0307  ef             557    557       RST   RST5             ;LOAD IT
0308  2a 57 10       558    558       LD    HL,(ADDR1)       ;GET ADDR OF INDEX
030b  cd cb 07       559    559       CALL  FSUB             ;COMPAE TO END VALUE
030e  f1             560    560       POP   AF               ;RESTORE STATUS
030f  f2 1e 03       561    561       JP    P,FORPO          ;BRIF FOR IS POS
0312  cd 9e 09       562    562 FORXE CALL  FTEST            ;GET SIGN OF DIFFERENCE
0315  ca 24 03       563    563       JP    Z,FORTA          ;BRIF START = END
0318  fa 24 03       564    564       JP    M,FORTA          ;BRIF START > END
031b  c3 6e 03       565    565       JP    LNEXT            ;GO LOCATE MATCHING NEXT
031e  cd 9e 09       566    566 FORPO CALL  FTEST            ;GET SIGN OF DIFFERENCE
0321  fa 6e 03       567    567       JP    M,LNEXT          ;BRIF START > END
0324  11 6e 10       568    568 FORTA LD    DE,FORNE         ;POINT TABLE
0327  2a 5f 10       569    569       LD    HL,(INDX)        ;GET INDEX NAME
032a  eb             570    570       EX    DE,HL            ;FLIP/FLOP
032b  7e             571    571       LD    A,(HL)           ;GET COUNT
032c  47             572    572       LD    B,A              ;STORE IT
032d  0e 01          573    573       LD    C,1              ;NEW CTR
032f  b7             574    574       OR    A                ;TEST IF ZERO
0330  23             575    575       INC   HL               ;POINT
0331  ca 47 03       576    576       JP    Z,FOREQ          ;BRIF TABLE EMPTY
0334  7e             577    577 FORLP LD    A,(HL)           ;GET 1ST BYTE
0335  ba             578    578       CP    D                ;TEST IF EQUAL
0336  c2 40 03       579    579       JP    NZ,FORNO         ;BRIF NOT
0339  23             580    580       INC   HL               ;POINT NEXT
033a  7e             581    581       LD    A,(HL)           ;GET NEXT BYTE
033b  2b             582    582       DEC   HL               ;POINT BACK
033c  bb             583    583       CP    E                ;TEST IF EQUAL
033d  c2 47 03       584    584       JP    NZ,FOREQ         ;BRIF EQUAL
0340  ff             585    585 FORNO RST   RST7             ;GO BUMP HL
0341  0c             586    586       DEFB  12               ;BY 12
0342  0c             587    587       INC   C                ;COUNT IT
0343  05             588    588       DEC   B                ;DECR CTR
0344  c2 34 03       589    589       JP    NZ,FORLP         ;LOOP
0347  79             590    590 FOREQ LD    A,C              ;GET UPDATED COUNT
0348  fe 09          591    591       CP    9                ;TEST IF TBL EXCEEDED
034a  d2 86 0e       592    592       JP    NC,FOERR         ;ERROR IF MORE THAN 8 OPEN FOR/NEXT
034d  32 6e 10       593    593       LD    (FORNE),A        ;PUT IN TABLE
0350  72             594    594       LD    (HL),D           ;STORE IT
0351  23             595    595       INC   HL               ;POINT NEXT
0352  73             596    596       LD    (HL),E           ;STORE IT TOO
0353  23             597    597       INC   HL               ;POINT NEXT
0354  e5             598    598       PUSH  HL               ;SAVE HL
0355  21 3e 10       599    599       LD    HL,TVAR2         ;POINT STEP
0358  ef             600    600       RST   RST5             ;GO LOAD IT
Z80-Assembler		Release 1.6				Page 11
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0359  e1             601    601       POP   HL               ;RESTORE HL
035a  f7             602    602       RST   RST6             ;PUT IN TABLE
035b  e5             603    603       PUSH  HL               ;SAVE HL
035c  21 3a 10       604    604       LD    HL,TVAR1         ;POINT TO-VAL
035f  ef             605    605       RST   RST5             ;GO LOAD IT
0360  e1             606    606       POP   HL               ;RESTORE HL
0361  f7             607    607       RST   RST6             ;PUT IN TABLE
0362  3a 5e 10       608    608       LD    A,(STMT+1)       ;GET HIGH STMT ADDR
0365  77             609    609       LD    (HL),A           ;PUT IT
0366  23             610    610       INC   HL               ;POINT NEXT
0367  3a 5d 10       611    611       LD    A,(STMT)         ;GET LOW STMT ADDR
036a  77             612    612       LD    (HL),A           ;PUT IT
036b  c3 86 01       613    613       JP    RUN              ;CONTINUE
036e  2a 5d 10       614    614 LNEXT LD    HL,(STMT)        ;GET ADDR OF STMT
0371  5e             615    615       LD    E,(HL)           ;GET LENGTH CODE
0372  16 00          616    616       LD    D,0              ;INIT INCREMENT
0374  19             617    617       ADD   HL,DE            ;COMPUTE ADDR OF NEXT STATEMENT
0375  7e             618    618       LD    A,(HL)           ;GET NEW LEN CODE
0376  b7             619    619       OR    A                ;SEE IF END OF PGM
0377  ca 8a 0e       620    620       JP    Z,NXERR          ;BRIF IT IS
037a  22 5d 10       621    621       LD    (STMT),HL        ;SAVE ADDRESS
037d  ff             622    622       RST   RST7             ;GO BUMP HL
037e  03             623    623       DEFB  3                ;BY THREE
037f  cf             624    624       RST   RST1             ;SKIP SPACES
0380  11 95 0f       625    625       LD    DE,NEXTL         ;POINT 'NEXT'
0383  d7             626    626       RST   RST2             ;SEE IF IT IS A NEXT STMT
0384  c2 6e 03       627    627       JP    NZ,LNEXT         ;LOOP IF NOT
0387  cf             628    628       RST   RST1             ;SKIP SPACES
0388  3a 60 10       629    629       LD    A,(INDX+1)       ;GET FIRST CHAR
038b  be             630    630       CP    (HL)             ;COMPARE
038c  c2 6e 03       631    631       JP    NZ,LNEXT         ;BRIF NOT MATCH NEXT
038f  3a 5f 10       632    632       LD    A,(INDX)         ;GET 2ND CHAR
0392  23             633    633       INC   HL               ;DITTO
0393  fe 20          634    634       CP    ' '              ;SEE IF SINGLE CHAR
0395  ca 9c 03       635    635       JP    Z,FORN1          ;BRIF IT IS
0398  be             636    636       CP    (HL)             ;COMPARE THE TWO
0399  c2 6e 03       637    637       JP    NZ,LNEXT         ;BRIF NOT EQUAL
039c  cf             638    638 FORN1 RST   RST1             ;SKIP TO END (HOPEFULLY)
039d  b7             639    639       OR    A                ;SEE IF END
039e  c2 6e 03       640    640       JP    NZ,LNEXT         ;BRIF NOT END
03a1  c3 86 01       641    641       JP    RUN              ;ELSE, GO NEXT STMT
                     642    642 *HEADING IMSAI 8080 4K BASIC
03a4                 643    643 IF    EQU   $
                     644    644 ;
                     645    645 ;
                     646    646 ; STMT:  IF EXPR RELATION EXPR THEN STMT #
                     647    647 ;
                     648    648 ;
03a4  cd ef 0a       649    649       CALL  EXPR             ;GO EVALUATE LEFT EXPRESSION
03a7  e5             650    650       PUSH  HL               ;SAVE HL
03a8  21 3a 10       651    651       LD    HL,TVAR1         ;GET ADDR OF TEMP STORAGE
03ab  f7             652    652       RST   RST6             ;SAVE IT
03ac  e1             653    653       POP   HL               ;RESTORE HL
03ad  af             654    654       XOR   A                ;CLEAR A
03ae  4f             655    655       LD    C,A              ;SAVE IN REG C
03af  47             656    656       LD    B,A              ;INIT REG
03b0  7e             657    657 IFREL LD    A,(HL)           ;GET OPERATOR
03b1  04             658    658       INC   B                ;COUNT
03b2  fe 3d          659    659       CP    '='              ;TEST FOR EQUAL
03b4  c2 b9 03       660    660       JP    NZ,IFEQ          ;BRIF IT IS
Z80-Assembler		Release 1.6				Page 12
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
03b7  0c             661    661       INC   C                ;ADD 1 TO C
03b8  23             662    662       INC   HL               ;POINT NEXT
03b9  fe 3e          663    663 IFEQ  CP    '>'              ;TEST FOR GREATER THAN
03bb  c2 c1 03       664    664       JP    NZ,IFGT          ;BRIF IT IS
03be  0c             665    665       INC   C                ;ADD TWO
03bf  0c             666    666       INC   C                ;TO REL CODE
03c0  23             667    667       INC   HL               ;POINT NEXT
03c1  fe 3c          668    668 IFGT  CP    '<'              ;TEST FOR LESS THAN
03c3  c2 cb 03       669    669       JP    NZ,IFLT          ;BRIF IT IS
03c6  79             670    670       LD    A,C              ;GET REL CODE
03c7  c6 04          671    671       ADD   A,4              ;PLUS FOUR
03c9  4f             672    672       LD    C,A              ;PUT BACK
03ca  23             673    673       INC   HL               ;POINT NEXT
03cb  79             674    674 IFLT  LD    A,C              ;GET REL CODE
03cc  b7             675    675       OR    A                ;TEST IT
03cd  ca 7a 0e       676    676       JP    Z,SNERR          ;BRIF SOME ERROR
03d0  32 38 10       677    677       LD    (REL),A          ;SAVE CODE
03d3  78             678    678       LD    A,B              ;GET COUNT
03d4  fe 02          679    679       CP    2                ;TEST FOR TWO
03d6  c2 b0 03       680    680       JP    NZ,IFREL         ;SEE IF MULTIPLE RELATION
03d9  cd ef 0a       681    681       CALL  EXPR             ;GO EVALUATE RIGHT SIDE
03dc  e5             682    682       PUSH  HL               ;SAVE STMT LOCATION
03dd  21 3a 10       683    683       LD    HL,TVAR1         ;POINT LEFT
03e0  cd cb 07       684    684       CALL  FSUB             ;SUBTRACT LEFT FROM RIGHT
03e3  e1             685    685       POP   HL               ;RESTORE STMT ADDR
03e4  3a 38 10       686    686       LD    A,(REL)          ;GET RELATION
03e7  1f             687    687       RRA                    ;TEST BIT D0
03e8  d2 f1 03       688    688       JP    NC,IFNOT         ;BRIF NO EQUAL TEST
03eb  cd 9e 09       689    689       CALL  FTEST            ;GET SIGN OF DIFFERENCE
03ee  ca 10 04       690    690       JP    Z,TRUE           ;BRIF LEFT=RIGHT
03f1  3a 38 10       691    691 IFNOT LD    A,(REL)          ;LOAD RELATION
03f4  e6 02          692    692       AND   02H              ;MASK IT
03f6  ca ff 03       693    693       JP    Z,IFNTX          ;BRIF NO >
03f9  cd 9e 09       694    694       CALL  FTEST            ;GET SIGN OF DIFFERENCE
03fc  fa 10 04       695    695       JP    M,TRUE           ;BRIF GT
03ff  3a 38 10       696    696 IFNTX LD    A,(REL)          ;LOAD RELATION
0402  e6 04          697    697       AND   04H              ;MASK IT
0404  ca 86 01       698    698       JP    Z,RUN            ;BRIF NO <
0407  cd 9e 09       699    699       CALL  FTEST            ;GET SIGN OF DIFFERENCE
040a  fa 86 01       700    700       JP    M,RUN            ;BRIF GT
040d  ca 86 01       701    701       JP    Z,RUN            ;BRIF EQUAL
0410  11 e3 0f       702    702 TRUE  LD    DE,THENL         ;GET ADDR 'THEN'
0413  d7             703    703       RST   RST2             ;GO COMPARE
0414  c2 7a 0e       704    704       JP    NZ,SNERR         ;BRIF ERROR
0417  c3 fc 01       705    705       JP    GOTO             ;BRIF IT IS
                     706    706 *HEADING IMSAI 8080 4K BASIC
041a                 707    707 LET   EQU   $
                     708    708 ;
                     709    709 ;
                     710    710 ; STMT:  :LET: VAR = EXPR
                     711    711 ;
                     712    712 ;
041a  cd 30 0f       713    713       CALL  VAR              ;NEXT MUST BE VARIABLE NAME
041d  fe 3d          714    714       CP    '='              ;TEST FOR EQUAL SIGN
041f  c2 7a 0e       715    715       JP    NZ,SNERR         ;BRIF MISSING EQUAL
0422  cd fe 0e       716    716       CALL  SEARC            ;GO FIND ADDRESS OF VAR
0425  d5             717    717       PUSH  DE               ;SAVE ADDRESS
0426  23             718    718       INC   HL               ;POINT NEXT
0427  cd ef 0a       719    719       CALL  EXPR             ;GO EVALUATE EXPRESSION
042a  e1             720    720       POP   HL               ;RESTORE ADDRESS
Z80-Assembler		Release 1.6				Page 13
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
042b  f7             721    721       RST   RST6             ;GO STORE VARIABLE
042c  c3 86 01       722    722       JP    RUN              ;CONTINUE
                     723    723 *HEADING IMSAI 8080 4K BASIC
042f                 724    724 NEXT  EQU   $
                     725    725 ;
                     726    726 ;
                     727    727 ; STMT:  NEXT VAR
                     728    728 ;
                     729    729 ;
042f  cd 30 0f       730    730       CALL  VAR              ;GET VARIABLE NAME
0432  eb             731    731       EX    DE,HL            ;FLIP/FLOP
0433  22 5f 10       732    732       LD    (INDX),HL        ;SAVE VAR NAME
0436  e5             733    733       PUSH  HL               ;SAVE VAR NAME
0437  21 6e 10       734    734       LD    HL,FORNE         ;POINT FOR/NEXT TABLE
043a  46             735    735       LD    B,(HL)           ;GET SIZE
043b  78             736    736       LD    A,B              ;LOAD IT
043c  b7             737    737       OR    A                ;TEST IT
043d  ca 8a 0e       738    738       JP    Z,NXERR          ;BRIF TABLE EMPTY
0440  23             739    739       INC   HL               ;POINT NEXT
0441  d1             740    740       POP   DE               ;RESTORE VAR NAME
0442  7e             741    741 NXLP  LD    A,(HL)           ;GET 1ST BYTE
0443  23             742    742       INC   HL               ;POINT NEXT
0444  ba             743    743       CP    D                ;COMPARE
0445  c2 4d 04       744    744       JP    NZ,NXNE          ;BRIF NOT EQUAL
0448  7e             745    745       LD    A,(HL)           ;GET 2ND BYTE
0449  bb             746    746       CP    E                ;COMPARE
044a  ca 56 04       747    747       JP    Z,NXEQ           ;BRIF EQUAL
044d  ff             748    748 NXNE  RST   RST7             ;GO BUMP HL
044e  0b             749    749       DEFB  11               ;BY ELEVEN
044f  05             750    750       DEC   B                ;DECR COUNT
0450  c2 42 04       751    751       JP    NZ,NXLP          ;LOOP
0453  c3 8a 0e       752    752       JP    NXERR            ;GO PUT ERROR MSG
0456  3a 6e 10       753    753 NXEQ  LD    A,(FORNE)        ;GET ORIG COUNT
0459  90             754    754       SUB   B                ;MINUS REMAIN
045a  3c             755    755       INC   A                ;PLUS ONE
045b  32 6e 10       756    756       LD    (FORNE),A        ;STORE NEW COUNT
045e  23             757    757       INC   HL               ;POINT STEP
045f  e5             758    758       PUSH  HL               ;SAVE HL ADDR
0460  cd fe 0e       759    759       CALL  SEARC            ;GO GET ADDR OF INDEX
0463  eb             760    760       EX    DE,HL            ;PUT TO HL
0464  22 57 10       761    761       LD    (ADDR1),HL       ;SAVR IT
0467  ef             762    762       RST   RST5             ;LOAD INDEX
0468  e1             763    763       POP   HL               ;GET HL (TBL)
0469  e5             764    764       PUSH  HL               ;RESAVE
046a  cd d2 06       765    765       CALL  FADD             ;ADD STEP VALUE
046d  21 3a 10       766    766       LD    HL,TVAR1         ;POINT NEW INDEX
0470  f7             767    767       RST   RST6             ;STORE IT
0471  e1             768    768       POP   HL               ;GET HL (TBL)
0472  e5             769    769       PUSH  HL               ;RESAVE
0473  ff             770    770       RST   RST7             ;GO BUMP HL
0474  04             771    771       DEFB  4                ;BY FOUR
0475  cd cb 07       772    772       CALL  FSUB             ;SUBTRACT TO VALUE
0478  cd 9e 09       773    773       CALL  FTEST            ;GET SIGN OF DIFFERENCE
047b  ca 93 04       774    774       JP    Z,NXTZR          ;BRIF ZERO
047e  e1             775    775       POP   HL               ;GET HL (PTR TO STEP)
047f  e5             776    776       PUSH  HL               ;RE-SAVE
0480  7e             777    777       LD    A,(HL)           ;GET SIGN & EXPONENT OF STEP
0481  b7             778    778       OR    A                ;TEST IT
0482  3a 2a 10       779    779       LD    A,(FACC)         ;GET SIGN & EXPONENT OF DIFFERENCE
0485  fa 8f 04       780    780       JP    M,NXTNE          ;BRIF NEGATIVE
Z80-Assembler		Release 1.6				Page 14
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0488  b7             781    781 NXTPO OR    A                ;TEST IT
0489  fa 93 04       782    782       JP    M,NXTZR          ;BRIF LESS THAN TO-EXPR
048c  c3 ab 04       783    783       JP    NEXTZ            ;GO PAST NEXT
048f  b7             784    784 NXTNE OR    A                ;TEST IT
0490  fa ab 04       785    785       JP    M,NEXTZ          ;BRIF END OF LOOP
0493  e1             786    786 NXTZR POP   HL               ;POP THE STACK
0494  ff             787    787       RST   RST7             ;GO BUMP HL
0495  08             788    788       DEFB  8                ;BY EIGHT
0496  56             789    789       LD    D,(HL)           ;GET HI BYTE
0497  23             790    790       INC   HL               ;POINT NEXT
0498  5e             791    791       LD    E,(HL)           ;GET LOW BYTE
0499  eb             792    792       EX    DE,HL            ;PUT TO HL
049a  22 5d 10       793    793       LD    (STMT),HL        ;SAVE ADDR OF FOR
049d  11 3a 10       794    794       LD    DE,TVAR1         ;POINT UPDATED INDEX VALUE
04a0  2a 57 10       795    795       LD    HL,(ADDR1)       ;GET ADDR
04a3  06 04          796    796       LD    B,4              ;LENGTH
04a5  cd 61 0e       797    797       CALL  COPYD            ;GO MOVE TO I
04a8  c3 86 01       798    798       JP    RUN              ;CONTINUE STMT AFTER FOR
04ab                 799    799 NEXTZ EQU   $
04ab  21 6e 10       800    800       LD    HL,FORNE         ;GET ADDR TABLE
04ae  35             801    801       DEC   (HL)             ;SUBTRACT ONE FROM COUNT
04af  c3 86 01       802    802       JP    RUN              ;GO STMT AFTER NEXT
                     803    803 *HEADING IMSAI 8080 4K BASIC
04b2                 804    804 INPUT EQU   $
                     805    805 ;
                     806    806 ;
                     807    807 ; STMT:  INPUT VAR :, VAR, VAR:
                     808    808 ;
                     809    809 ;
04b2  11 02 10       810    810       LD    DE,IOBUF         ;GET ADDR OF BUFFER
04b5  eb             811    811       EX    DE,HL            ;FLIP/FLOP
04b6  22 57 10       812    812       LD    (ADDR1),HL       ;SAVE ADDR
04b9  36 00          813    813       LD    (HL),0           ;MARK BUFFER EMPTY
04bb  eb             814    814       EX    DE,HL            ;FLIP/BACK
04bc  cd 30 0f       815    815 IN1   CALL  VAR              ;GO GET VAR NAME
04bf  cd fe 0e       816    816       CALL  SEARC            ;GO ;LOOK UP ADDRESS
04c2  e5             817    817       PUSH  HL               ;SAVE HL ADDR
04c3  d5             818    818       PUSH  DE               ;SAVE VAR ADDRE
04c4  2a 57 10       819    819       LD    HL,(ADDR1)       ;GET ADDR PREV BUFFER
04c7  7e             820    820       LD    A,(HL)           ;LOAD CHAR
04c8  fe 2c          821    821       CP    ','              ;TEST IF COMMA
04ca  23             822    822       INC   HL               ;POINT NEXT
04cb  ca d7 04       823    823       JP    Z,IN2            ;BRIF CONTINUE FROM PREV
04ce  b7             824    824       OR    A                ;TEST IF END OF LINE
04cf  c2 7a 0e       825    825       JP    NZ,SNERR         ;BRIF ERROR
04d2  3e 3f          826    826       LD    A,'?'            ;PROMPT CHAR
04d4  cd 59 0d       827    827       CALL  TERMI            ;GO READ FROM TTY
04d7  cd 44 05       828    828 IN2   CALL  FIN              ;GO CONVERT TO FLOATING
04da  22 57 10       829    829       LD    (ADDR1),HL       ;SAVE ADDRESS
04dd  e1             830    830       POP   HL               ;GET VAR ADDRESS
04de  f7             831    831       RST   RST6             ;GO STORE THE NUMBER
04df  e1             832    832       POP   HL               ;RESTORE STMT POINTER
04e0  cf             833    833       RST   RST1             ;SKIP SPACES
04e1  fe 2c          834    834       CP    ','              ;TEST FOR COMMA
04e3  23             835    835       INC   HL               ;POINT NEXT
04e4  ca bc 04       836    836       JP    Z,IN1            ;RECURSIVE IF COMMA
04e7  2b             837    837       DEC   HL               ;POINT BACK
04e8  c3 86 01       838    838       JP    RUN              ;GO NEXT STMT
                     839    839 *HEADING IMSAI 8080 4K BASIC
04eb                 840    840 READ  EQU   $
Z80-Assembler		Release 1.6				Page 15
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                     841    841 ;
                     842    842 ; STMT:  READ VAR :,VAR ...:
                     843    843 ;
04eb  cd 30 0f       844    844       CALL  VAR              ;GO GET VAR NAME
04ee  cd fe 0e       845    845       CALL  SEARC            ;GO GET ADDRESS
04f1  e5             846    846       PUSH  HL               ;SAVE HL
04f2  d5             847    847       PUSH  DE               ;SAVE DE
04f3  2a 16 11       848    848       LD    HL,(DATAP)       ;GET DATA STMT POINTER
04f6  7e             849    849       LD    A,(HL)           ;LOAD THE CHAR
04f7  b7             850    850       OR    A                ;TEST IF END OF STMT
04f8  c2 1c 05       851    851       JP    NZ,NOTDT         ;BRIF NOT END OF STMT
04fb  23             852    852       INC   HL               ;POINT START NEXT STMT
04fc  7e             853    853 DATAN LD    A,(HL)           ;LOAD LEN
04fd  22 16 11       854    854       LD    (DATAP),HL       ;SAVE ADDR
0500  b7             855    855       OR    A                ;TEST IF END OF PGM
0501  ca 82 0e       856    856       JP    Z,DAERR          ;BRIF OUT OF DATA
0504  23             857    857       INC   HL               ;POINT NEXT
0505  22 68 10       858    858       LD    (DASTM),HL       ;SAVE ADDR OF LINE NUMBER
0508  23             859    859       INC   HL               ;SKIP LINE NUMBER
0509  23             860    860       INC   HL               ;POINT 1ST DATA BYTE
050a  cf             861    861       RST   RST1             ;SKIP BLANKS
050b  11 88 0f       862    862       LD    DE,DATAL         ;POINT 'DATA'
050e  d7             863    863       RST   RST2             ;COMPARE
050f  ca 1c 05       864    864       JP    Z,NOTDT          ;BRIF IT IS DATA STMT
0512  2a 16 11       865    865       LD    HL,(DATAP)       ;GET ADDR START
0515  5e             866    866       LD    E,(HL)           ;GET LEN CODE
0516  16 00          867    867       LD    D,0              ;CLEAR D
0518  19             868    868       ADD   HL,DE            ;POINT NEXT STMT
0519  c3 fc 04       869    869       JP    DATAN            ;LOOP NEXT STMT
051c  cd 44 05       870    870 NOTDT CALL  FIN              ;GO CONVERT VALUE
051f  7e             871    871       LD    A,(HL)           ;GET CHAR WHICH STOPPED US
0520  fe 2c          872    872       CP    ','              ;TEST IF COMMA
0522  c2 37 05       873    873       JP    NZ,NOTCO         ;BRIF NOT
0525  23             874    874       INC   HL               ;POINT NEXT
0526  22 16 11       875    875 DATOK LD    (DATAP),HL       ;SAVE ADDRESS
0529  e1             876    876       POP   HL               ;RESTORE ADDR OF VAR
052a  f7             877    877       RST   RST6             ;STORE THE VALUE
052b  e1             878    878       POP   HL               ;RESTORE POINTER TO STM
052c  7e             879    879       LD    A,(HL)           ;LOAD THE CHAR
052d  fe 2c          880    880       CP    ','              ;TEST IF COMMA
052f  23             881    881       INC   HL               ;POINT NEXT
0530  ca eb 04       882    882       JP    Z,READ           ;RECURSIVE IF IT IS
0533  2b             883    883       DEC   HL               ;RESET
0534  c3 86 01       884    884       JP    RUN              ;CONTINUE
0537  b7             885    885 NOTCO OR    A                ;TEST IF END OF STMT
0538  ca 26 05       886    886       JP    Z,DATOK          ;BRIF OK
053b  2a 68 10       887    887       LD    HL,(DASTM)       ;GET DATA STMT LINE NUMBER
053e  22 6a 10       888    888       LD    (LINE),HL        ;SAVE IN LINE NUMBER
0541  c3 7a 0e       889    889       JP    SNERR            ;GO PROCESS ERROR
                     890    890 ;
                     891    891 *HEADING IMSAI 8080 4K BASIC
0544                 892    892 FIN   EQU   $
                     893    893 ;
                     894    894 ;FLOATING POINT INPUT CONVERSION ROUTINE
                     895    895 ;
                     896    896 ;THIS SUBROUTINE CONVERTS AN ASCII STRING OF CHARACTERS TO
                     897    897 ;POINT ACCUMULATOR.  THE INPUT FIELD MAY CONTAIN ANY VALID
                     898    898 ;INCLUDING SCIENTIFIC (NNN.NNNNE+NN)
                     899    899 ;THE INPUT STRING IS TERMINATED BY ANY NON-NUMERIC CHARACT
                     900    900 ;
Z80-Assembler		Release 1.6				Page 16
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                     901    901 ;
0544  eb             902    902       EX    DE,HL            ;FLIP/FLOP DE HL
0545  21 2a 10       903    903       LD    HL,FACC          ;POINT TO FACC
0548  06 04          904    904       LD    B,4              ;LOOP CTR
054a  cd 50 0e       905    905       CALL  ZEROM            ;GO CLEAR THE FACC
054d  ff             906    906       RST   RST7             ;GO BUMP HL
054e  fc             907    907       DEFB  -4               ;BY NEG FOUR
054f  48             908    908       LD    C,B              ;INIT DIGIT COUNTER
0550  1a             909    909       LD    A,(DE)           ;GET FIRST BYTE
0551  fe 2b          910    910       CP    '+'              ;TEST FOR PLUS SIGN
0553  ca 5d 05       911    911       JP    Z,FIN2           ;BRIF IS
0556  fe 2d          912    912       CP    '-'              ;TEST FOR MINUS SIGN
0558  c2 5f 05       913    913       JP    NZ,FIN3          ;BRIF NOT
055b  36 80          914    914       LD    (HL),80H         ;SET MINUS MANTISSA
055d  13             915    915 FIN2  INC   DE               ;POINT NEXT DIGIT
055e  1a             916    916       LD    A,(DE)           ;GET THE BYTE
055f  fe 30          917    917 FIN3  CP    '0'              ;TEST FOR LEADING ZERO
0561  ca 5d 05       918    918       JP    Z,FIN2           ;BRIF IT IS
0564  fe 3a          919    919 FIN4  CP    '9'+1            ;TEST FOR NINE
0566  d2 bc 05       920    920       JP    NC,FIN14         ;BRIF NOT NUMERIC
0569  fe 30          921    921       CP    '0'              ;TEST FOR ZERO
056b  da 77 05       922    922       JP    C,FIN5           ;BRIF NOT NUMERIC
056e  04             923    923       INC   B                ;COUNT EXPONENT
056f  cd 9e 05       924    924       CALL  FIN9             ;STORE THE DIGIT
0572  13             925    925       INC   DE               ;POINT NEXT
0573  1a             926    926       LD    A,(DE)           ;GET THE DIGIT
0574  c3 64 05       927    927       JP    FIN4             ;LOOP
0577  fe 2e          928    928 FIN5  CP    '.'              ;TEST FOR DOT
0579  c2 f7 05       929    929       JP    NZ,FIN19         ;BRIF NOT
057c  79             930    930       LD    A,C              ;GET DIGIT COUNT
057d  b7             931    931       OR    A                ;TEST FOR ZERO
057e  c2 8c 05       932    932       JP    NZ,FIN7          ;BRIF NOT
0581  13             933    933 FIN6  INC   DE               ;POINT NEXT
0582  1a             934    934       LD    A,(DE)           ;GET DIGIT
0583  fe 30          935    935       CP    '0'              ;TEST FOR ZERO
0585  c2 8e 05       936    936       JP    NZ,FIN8          ;BRIF NOT
0588  05             937    937       DEC   B                ;COUNT IT
0589  c3 81 05       938    938       JP    FIN6             ;LOOP
058c  13             939    939 FIN7  INC   DE               ;POINT NEXT
058d  1a             940    940       LD    A,(DE)           ;GET THE DIGIT
058e  fe 30          941    941 FIN8  CP    '0'              ;TEST FOR ZERO
0590  da f7 05       942    942       JP    C,FIN19          ;BRIF LOWER
0593  fe 3a          943    943       CP    '9'+1            ;TEST FOR NINE
0595  d2 bc 05       944    944       JP    NC,FIN14         ;BRIF HIGH
0598  cd 9e 05       945    945       CALL  FIN9             ;GO STORE DIGIT
059b  c3 8c 05       946    946       JP    FIN7             ;LOOP
059e  79             947    947 FIN9  LD    A,C              ;GET DIGIT COUNT
059f  fe 06          948    948       CP    6                ;TEST FOR MAX
05a1  c8             949    949       RET   Z                ;RETURN IF EQUAL
05a2  3c             950    950       INC   A                ;ADD ONE
05a3  4f             951    951       LD    C,A              ;REPLACE PREV COUNT
05a4  3c             952    952       INC   A                ;PLUS ONE
05a5  1f             953    953       RRA                    ;DIVIDE BY TWO
05a6  e6 0f          954    954       AND   0FH              ;MASK OFF UNUSED BITS
05a8  85             955    955       ADD   A,L              ;PLUS LOW BYTE OF H
05a9  6f             956    956       LD    L,A              ;REPLACE LOW BYTE OF HL
05aa  79             957    957       LD    A,C              ;RE-LOAD DIGIT COUNT
05ab  1f             958    958       RRA                    ;TEST EVEN/ODD
05ac  1a             959    959       LD    A,(DE)           ;GET THE DIGIT
05ad  da b6 05       960    960       JP    C,FIN12          ;BRIF ODD DIGIT
Z80-Assembler		Release 1.6				Page 17
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
05b0  e6 0f          961    961       AND   0FH              ;LOW 4 BITS ONLY
05b2  b6             962    962       OR    (HL)             ;GET HIGH 4 BITS
05b3  c3 b7 05       963    963       JP    FIN13            ;GO RETURN
05b6  e7             964    964 FIN12 RST   RST4             ;SHIFT LEFT
05b7  77             965    965 FIN13 LD    (HL),A           ;REPLACE
05b8  21 2a 10       966    966       LD    HL,FACC          ;POINT TO FACC
05bb  c9             967    967       RET                    ;RETURN
05bc  fe 45          968    968 FIN14 CP    'E'              ;TEST FOR EXPLICIT EXPONENT
05be  c2 f7 05       969    969       JP    NZ,FIN19         ;BRIF NOT EQUAL
05c1  13             970    970       INC   DE               ;POINT NEXT
05c2  1a             971    971       LD    A,(DE)           ;GET DIGIT
05c3  0e 00          972    972       LD    C,0              ;CLEAR COUNTER
05c5  fe 2b          973    973       CP    '+'              ;TEST FOR PLUS
05c7  ca f0 05       974    974       JP    Z,FIN17          ;BRIF EQUAL
05ca  fe 2d          975    975       CP    '-'              ;TEST FOR MINUS
05cc  c2 ef 05       976    976       JP    NZ,FIN16         ;BRIF NOT EQUAL
05cf  cd d8 05       977    977       CALL  FIN15            ;GET NUMERIC EXPONENT
05d2  79             978    978       LD    A,C              ;LOAD THE NUMBER
05d3  2f             979    979       CPL                    ;COMPLEMENT
05d4  3c             980    980       INC   A                ;PLUS ONE (TWOS COMPLEMENT)
05d5  c3 f4 05       981    981       JP    FIN18            ;CONTINUE
05d8  13             982    982 FIN15 INC   DE               ;POINT NEXT
05d9  1a             983    983       LD    A,(DE)           ;GET DIGIT
05da  fe 30          984    984       CP    '0'              ;TEST ZERO
05dc  d8             985    985       RET   C                ;RETURN IF ERROR
05dd  fe 3a          986    986       CP    '9'+1            ;TEST NINE
05df  d0             987    987       RET   NC               ;RETURN IF NOT NUMERIC
05e0  79             988    988       LD    A,C              ;GET PRIOR
05e1  87             989    989       ADD   A,A              ;TIMES TWO
05e2  4f             990    990       LD    C,A              ;SAVE
05e3  87             991    991       ADD   A,A              ;TIMES FOUR
05e4  87             992    992       ADD   A,A              ;TIMES EIGHT
05e5  81             993    993       ADD   A,C              ;TIMES TEN
05e6  4f             994    994       LD    C,A              ;SAVE
05e7  1a             995    995       LD    A,(DE)           ;GET THIS DIGIT
05e8  e6 0f          996    996       AND   0FH              ;MASK OFF HIGH FOUR BITS
05ea  81             997    997       ADD   A,C              ;PLUS PREV*10
05eb  4f             998    998       LD    C,A              ;SAVE
05ec  c3 d8 05       999    999       JP    FIN15            ;LOOP
05ef  1b            1000   1000 FIN16 DEC   DE               ;POINT PRIOR TEMP
05f0  cd d8 05      1001   1001 FIN17 CALL  FIN15            ;GO GET NUMERIC EXPONENT
05f3  79            1002   1002       LD    A,C              ;LOAD THE EXPONENT
05f4  80            1003   1003 FIN18 ADD   A,B              ;PLUS COMPUTED EXPONENT
05f5  47            1004   1004       LD    B,A              ;SAVE IT
05f6  1a            1005   1005       LD    A,(DE)           ;GET LAST CHAR
05f7  23            1006   1006 FIN19 INC   HL               ;POINT 1ST DIGIT
05f8  7e            1007   1007       LD    A,(HL)           ;LOAD
05f9  b7            1008   1008       OR    A                ;TEST IF ZERO
05fa  ca 05 06      1009   1009       JP    Z,FIN20          ;BRIF ZERO
05fd  2b            1010   1010       DEC   HL               ;POINT EXPONENT
05fe  05            1011   1011       DEC   B                ;SUB ONE FROM EXPONENT
05ff  78            1012   1012       LD    A,B              ;GET EXPONENT
0600  e6 7f         1013   1013       AND   7FH              ;TURN OFF HIGH BIT
0602  b6            1014   1014       OR    (HL)             ;OR IN MANTISSA SIGN
0603  77            1015   1015       LD    (HL),A           ;STORE IN FACC
0604  af            1016   1016       XOR   A                ;TURN CY OFF, CLEAR ACC
0605  eb            1017   1017 FIN20 EX    DE,HL            ;FLIP/FLOP
0606  c9            1018   1018       RET                    ;RETURN
                    1019   1019 *HEADING IMSAI 8080 4K BASIC
0607                1020   1020 FOUT  EQU   $
Z80-Assembler		Release 1.6				Page 18
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                    1021   1021 ;
                    1022   1022 ;FLOATING POINT OUTPUT FORMAT ROUTINE
                    1023   1023 ;
                    1024   1024 ;THIS SUBROUTINE CONVERTS A NUMBER IN THE FLOATING POINT AC
                    1025   1025 ;TO A FORMAT SUITABLE FOR PRINTING. THAT IS, THE NUMBER WIL
                    1026   1026 ;SCIENTIFIC NOTATION (+N.NNNNNE+NN) IF THE EXPONENT IS > 5
                    1027   1027 ;OTHERWISE IT WILL BE ZERO SUPPRESSED BOTH ON THE LEFT OF T
                    1028   1028 ;PORTION AND ON THE RIGHT OF THE FRACTION.
                    1029   1029 ;
0607  11 2a 10      1030   1030       LD    DE,FACC          ;POINT TO FLOATING POINT ACCUMULATOR
060a  1a            1031   1031       LD    A,(DE)           ;GET EXPONENT BYTE
060b  4f            1032   1032       LD    C,A              ;SAVE IT
060c  17            1033   1033       RLA                    ;SHIFT (TEST MANTISSA SIGN)
060d  36 20         1034   1034       LD    (HL),' '         ;DEFAULT POSITIVE
060f  d2 14 06      1035   1035       JP    NC,FOUT1         ;BRIF POSITIVE
0612  36 2d         1036   1036       LD    (HL),'-'         ;MOVE DASH
0614  13            1037   1037 FOUT1 INC   DE               ;POINT TO FIRST & SECOND DIGITS
0615  23            1038   1038       INC   HL               ;AND NEXT OUTPUT POSITION
0616  1a            1039   1039       LD    A,(DE)           ;PUT TO ACC
0617  cd f7 0e      1040   1040       CALL  RIGHT            ;SHIFT RIGHT
061a  f6 30         1041   1041       OR    '0'              ;DECIMAL ZONE
061c  77            1042   1042       LD    (HL),A           ;PUT OUT
061d  23            1043   1043       INC   HL               ;POINT NEXT OUT
061e  36 2e         1044   1044       LD    (HL),'.'         ;MOVE DECIMAL POINT
0620  06 03         1045   1045       LD    B,3              ;INIT LOOP COUNTER
0622  c3 2e 06      1046   1046       JP    FOUT3            ;JUMP INTO MIDDLE OF LOOP
0625  23            1047   1047 FOUT2 INC   HL               ;POINT NEXT OUT
0626  13            1048   1048       INC   DE               ;NEXT 2 DIGITS
0627  1a            1049   1049       LD    A,(DE)           ;GET HIGH & LOW
0628  cd f7 0e      1050   1050       CALL  RIGHT            ;SHIFT RIGHT
062b  f6 30         1051   1051       OR    '0'              ;DECIMAL ZONE
062d  77            1052   1052       LD    (HL),A           ;PUT TO OUTPUT
062e  23            1053   1053 FOUT3 INC   HL               ;POINT NEXT OUTPUT
062f  1a            1054   1054       LD    A,(DE)           ;GET DIGITS AGAIN
0630  e6 0f         1055   1055       AND   0FH              ;MASK OFF HIGH
0632  f6 30         1056   1056       OR    '0'              ;DECIMAL ZONE
0634  77            1057   1057       LD    (HL),A           ;PUT TO OUTPUT
0635  05            1058   1058       DEC   B                ;TEST LOOP COUNTER
0636  c2 25 06      1059   1059       JP    NZ,FOUT2         ;BRIF MORE
0639  23            1060   1060       INC   HL               ;POINT NEXT OUTPUT
063a  36 45         1061   1061       LD    (HL),'E'         ;MOVE LIT E
063c  23            1062   1062       INC   HL               ;POINT NEXT
063d  79            1063   1063       LD    A,C              ;GET EXPONENT BYTE
063e  e6 3f         1064   1064       AND   3FH              ;MASK OFF SIGNS
0640  47            1065   1065       LD    B,A              ;SAVE IN B
0641  79            1066   1066       LD    A,C              ;GET EXPONENT BYTE
0642  17            1067   1067       RLA                    ;IGNORE MANTISSA SIGN
0643  17            1068   1068       RLA                    ;TEST EXPONENT SIGN
0644  36 2b         1069   1069       LD    (HL),'+'         ;DEFAULT POSITIVE
0646  d2 51 06      1070   1070       JP    NC,FOUT4         ;BRIF POSITIVE
0649  36 2d         1071   1071       LD    (HL),'-'         ;ELSE MOVE DASH
064b  79            1072   1072       LD    A,C              ;RELOAD EXPONENT BYTE
064c  f6 c0         1073   1073       OR    0C0H             ;SET ALL ON
064e  2f            1074   1074       CPL                    ;COMPLEMENT ACC
064f  3c            1075   1075       INC   A                ;PLUS 1 (TWOS COMPLEMENT)
0650  47            1076   1076       LD    B,A              ;SAVE IN B
0651  23            1077   1077 FOUT4 INC   HL               ;POINT NEXT OUT
0652  78            1078   1078       LD    A,B              ;GET EXPONENT
0653  06 2f         1079   1079       LD    B,2FH            ;INIT COUNTER
0655  d6 0a         1080   1080 FOUT5 SUB   10               ;SUBTRACT 10
Z80-Assembler		Release 1.6				Page 19
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0657  04            1081   1081       INC   B                ;COUNT 1
0658  d2 55 06      1082   1082       JP    NC,FOUT5         ;BRIF NOT NEG
065b  70            1083   1083       LD    (HL),B           ;POINT TO OUTPUT
065c  23            1084   1084       INC   HL               ;POINT NEXT
065d  c6 3a         1085   1085       ADD   A,58             ;ADJUST
065f  77            1086   1086       LD    (HL),A           ;MOVE 2ND DIGIT
0660  79            1087   1087       LD    A,C              ;GET EXPONENT
0661  17            1088   1088       RLA                    ;SHIFT OFF MANTISSA SIGN
0662  b7            1089   1089       OR    A                ;TEST
0663  f2 6e 06      1090   1090       JP    P,FOUT6          ;BRIF POSITIVE
0666  37            1091   1091       SCF                    ;SET CY
0667  1f            1092   1092       RRA                    ;SHIFT BACK
0668  fe fe         1093   1093       CP    -2               ;TEST FOR MIN
066a  d8            1094   1094       RET   C                ;RETURN IF LESS THAN -2
066b  c3 72 06      1095   1095       JP    FOUT7            ;GO AROUND
066e  1f            1096   1096 FOUT6 RRA                    ;SHIFT BACK
066f  fe 06         1097   1097       CP    6                ;TEST IF TOO BIG
0671  d0            1098   1098       RET   NC               ;RETURN IF 6 OR GREATER
0672  4f            1099   1099 FOUT7 LD    C,A              ;SAVE EXPONENT
0673  06 04         1100   1100       LD    B,4              ;CTR
0675  36 20         1101   1101 FOUT8 LD    (HL),' '         ;SPACE OUT EXPONENT
0677  2b            1102   1102       DEC   HL               ;POINT PRIOR
0678  05            1103   1103       DEC   B                ;DECR CTR
0679  c2 75 06      1104   1104       JP    NZ,FOUT8         ;LOOP
067c  eb            1105   1105       EX    DE,HL            ;FLIP/FLOP
067d  7b            1106   1106       LD    A,E              ;GET LOW BYTE
067e  d6 05         1107   1107       SUB   5                ;POINT TO DOT
0680  6f            1108   1108       LD    L,A              ;PUT DOWN
0681  7a            1109   1109       LD    A,D              ;GET HIGH
0682  de 00         1110   1110       SBC   A,0              ;IN CASE OF BORROW
0684  67            1111   1111       LD    H,A              ;PUT DOWN
0685  79            1112   1112       LD    A,C              ;GET EXPONENT
0686  b7            1113   1113       OR    A                ;TEST SIGN
0687  ca 98 06      1114   1114       JP    Z,FOX1           ;BRIF ZERO
068a  fa ac 06      1115   1115       JP    M,FOX2           ;BRIF NEGATIVE
068d  46            1116   1116 FOUT9 LD    B,(HL)           ;GET HIGH BYTE
068e  23            1117   1117       INC   HL               ;POINT NEXT
068f  7e            1118   1118       LD    A,(HL)           ;GET LOW BYTE
0690  70            1119   1119       LD    (HL),B           ;SHIFT DOT TO RIGHT
0691  2b            1120   1120       DEC   HL               ;POINT BACK
0692  77            1121   1121       LD    (HL),A           ;MOVE THE DIGIT LEFT
0693  23            1122   1122       INC   HL               ;POINT NEXT
0694  0d            1123   1123       DEC   C                ;DECR CTR
0695  c2 8d 06      1124   1124       JP    NZ,FOUT9         ;LOOP
0698  eb            1125   1125 FOX1  EX    DE,HL            ;POINT END
0699  7e            1126   1126 FOX3  LD    A,(HL)           ;GET A DIGIT/DOT
069a  fe 30         1127   1127       CP    '0'              ;TEST FOR A TRAILING ZERO
069c  c2 a5 06      1128   1128       JP    NZ,FOX4          ;BRIF NOT
069f  36 20         1129   1129       LD    (HL),' '         ;SPACE FILL
06a1  2b            1130   1130       DEC   HL               ;POINT PRIOR
06a2  c3 99 06      1131   1131       JP    FOX3             ;LOOP
06a5  fe 2e         1132   1132 FOX4  CP    '.'              ;TEST FOR TRAILING DOT
06a7  c0            1133   1133       RET   NZ               ;RETURN IF NOT
06a8  36 20         1134   1134       LD    (HL),' '         ;SPACE IT OUT
06aa  2b            1135   1135       DEC   HL               ;POINT PRIOR
06ab  c9            1136   1136       RET                    ;RETURN
06ac  fe ff         1137   1137 FOX2  CP    0FFH             ;TEST IF -1
06ae  c2 ba 06      1138   1138       JP    NZ,FOX5          ;ELSE -2
06b1  2b            1139   1139       DEC   HL               ;POINT SIGNIFICANT
06b2  7e            1140   1140       LD    A,(HL)           ;GET THE CHAR
Z80-Assembler		Release 1.6				Page 20
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
06b3  36 2e         1141   1141       LD    (HL),'.'         ;MOVE THE DOT
06b5  23            1142   1142       INC   HL               ;POINT NEXT
06b6  77            1143   1143       LD    (HL),A           ;SHIFT THE DIGIT
06b7  c3 98 06      1144   1144       JP    FOX1             ;GO ZERO SUPPRESS
06ba  2b            1145   1145 FOX5  DEC   HL               ;POINT ONE TO LEFT
06bb  7e            1146   1146       LD    A,(HL)           ;PICK UP DIGIT
06bc  36 30         1147   1147       LD    (HL),'0'         ;REPLACE
06be  23            1148   1148       INC   HL               ;POINT RIGHT
06bf  77            1149   1149       LD    (HL),A           ;PUT THE DIGIT
06c0  62            1150   1150       LD    H,D              ;GET LOW ADDR
06c1  6b            1151   1151       LD    L,E              ;POINT LAST DIGIT
06c2  06 06         1152   1152       LD    B,6              ;CTR
06c4  2b            1153   1153 FOX6  DEC   HL               ;POINT PRIOR
06c5  7e            1154   1154       LD    A,(HL)           ;GET A DIGIT
06c6  23            1155   1155       INC   HL               ;POINT
06c7  77            1156   1156       LD    (HL),A           ;PUT IT ONE TO RIGHT
06c8  2b            1157   1157       DEC   HL               ;POINT
06c9  05            1158   1158       DEC   B                ;DECR CTR
06ca  c2 c4 06      1159   1159       JP    NZ,FOX6          ;LOOP
06cd  36 2e         1160   1160       LD    (HL),'.'         ;MOVE THE DOT
06cf  c3 98 06      1161   1161       JP    FOX1             ;CONTINUE
                    1162   1162 *HEADING IMSAI 8080 4K BASIC
06d2                1163   1163 FADD  EQU   $
                    1164   1164 ;
                    1165   1165 ;
                    1166   1166 ;FLOATING POINT ADD THE NUMBER AT (HL) TO THE FACC
                    1167   1167 ;
                    1168   1168 ;
06d2  23            1169   1169       INC   HL               ;POINT FIRST DIGIT
06d3  7e            1170   1170       LD    A,(HL)           ;LOAD IT
06d4  b7            1171   1171       OR    A                ;TEST IT
06d5  c8            1172   1172       RET   Z                ;RETURN IF ZERO
06d6  2b            1173   1173       DEC   HL               ;POINT BACK
06d7  cd 9e 09      1174   1174       CALL  FTEST            ;GO TEST SIGN OF FACC
06da  ca 28 00      1175   1175       JP    Z,RST5           ;JUST LOAD IF FACC = 0
06dd  11 2a 10      1176   1176       LD    DE,FACC          ;POINT FACC
06e0  1a            1177   1177       LD    A,(DE)           ;GET EXPONENT OF FACC
06e1  cd ac 09      1178   1178       CALL  FEXP             ;GO GET EXPONENT
06e4  47            1179   1179       LD    B,A              ;SAVE EXPONENT
06e5  7e            1180   1180       LD    A,(HL)           ;GET EXPONENT OF ADDR
06e6  cd ac 09      1181   1181       CALL  FEXP             ;GO GET EXPONENT
06e9  4f            1182   1182       LD    C,A              ;SAVE THE EXPONENT
06ea  90            1183   1183       SUB   B                ;GET DIFFERENCE OF TWO EXPONENTS
06eb  ca fe 06      1184   1184       JP    Z,FADD4          ;BRIF THEY'RE EQUAL
06ee  f2 f3 06      1185   1185       JP    P,FADD3          ;BRIF DIFFERENCE IS POSITIVE
06f1  2f            1186   1186       CPL                    ;COMPLEMENT ACC
06f2  3c            1187   1187       INC   A                ;PLUS ONE (TWO'S COMPLEMENT)
06f3  fe 06         1188   1188 FADD3 CP    6                ;COMPARE DIFFERENCE TO SIX
06f5  da fe 06      1189   1189       JP    C,FADD4          ;BRIF 5 OR LESS
06f8  78            1190   1190       LD    A,B              ;GET EXPON OF ADDUEND
06f9  91            1191   1191       SUB   C                ;GET TRUE DIFFERENCE AGAIN
06fa  f0            1192   1192       RET   P                ;RETURN IF FACC > ADDER
06fb  c3 28 00      1193   1193       JP    RST5             ;ELSE, ADDER > FACC
06fe  f5            1194   1194 FADD4 PUSH  AF               ;SAVE DIFFERENCE
06ff  c5            1195   1195       PUSH  BC               ;SAVE EXPONENTS
0700  11 2e 10      1196   1196       LD    DE,FTEMP         ;GET ADDR OF TEMP ACC
0703  06 04         1197   1197       LD    B,4              ;FOUR BYTES
0705  cd 58 0e      1198   1198       CALL  COPYH            ;GO COPY
0708  c1            1199   1199       POP   BC               ;GET EXPONENTS
0709  f1            1200   1200       POP   AF               ;GET DIFFERENCE
Z80-Assembler		Release 1.6				Page 21
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
070a  ca 32 07      1201   1201       JP    Z,FADD9          ;JUST ADD IF ZERO
070d  21 2f 10      1202   1202       LD    HL,FTEMP+1       ;DEFAULT
0710  f5            1203   1203       PUSH  AF               ;SAVE DIFFERENCE
0711  78            1204   1204       LD    A,B              ;GET FACC EXPON
0712  91            1205   1205       SUB   C                ;MINUS FTEMP EXPON
0713  f2 23 07      1206   1206       JP    P,FADD6          ;BRIF TEMP MUST BE SHIFTED
0716  21 2a 10      1207   1207       LD    HL,FACC          ;POINT FLOAT ACC
0719  79            1208   1208       LD    A,C              ;GET EXPONENT, SIGN
071a  e6 7f         1209   1209       AND   7FH              ;STRIP EXP SIGN
071c  4f            1210   1210       LD    C,A              ;PUT BACK
071d  7e            1211   1211       LD    A,(HL)           ;GET THE EXP
071e  e6 80         1212   1212       AND   80H              ;STRIP OFF OLD EXPON
0720  b1            1213   1213       OR    C                ;MOVE ADDER EXPON TO IT
0721  77            1214   1214       LD    (HL),A           ;REPLACE
0722  23            1215   1215       INC   HL               ;POINT FIRST DATA BYTE
0723  f1            1216   1216 FADD6 POP   AF               ;GET DIFFER
0724  4f            1217   1217       LD    C,A              ;SAVE IT
0725  06 03         1218   1218 FADD7 LD    B,3              ;LOOP CTR (INNER)
0727  16 00         1219   1219       LD    D,0              ;INIT CARRY OVER TO ZERO
0729  e5            1220   1220       PUSH  HL               ;SAVE ADDR
072a  cd e4 09      1221   1221       CALL  FSHFT            ;GO SHIFT
072d  e1            1222   1222       POP   HL               ;GET ADDR
072e  0d            1223   1223       DEC   C                ;DECR CTR
072f  c2 25 07      1224   1224       JP    NZ,FADD7         ;LOOP
0732                1225   1225 FADD9 EQU   $
0732  11 2a 10      1226   1226       LD    DE,FACC          ;POINT SIGN OF ADDUEND
0735  21 2e 10      1227   1227       LD    HL,FTEMP         ;AND SIGN OF ADDER
0738  1a            1228   1228       LD    A,(DE)           ;GET SIGN OF ADDUEND
0739  ae            1229   1229       XOR   (HL)             ;COMPARE THE TWO SIGNS
073a  fa 62 07      1230   1230       JP    M,FADD1          ;BRIF SIGNS DIFFER
073d  11 2d 10      1231   1231       LD    DE,FACC+3        ;POINT LOW END
0740  21 31 10      1232   1232       LD    HL,FTEMP+3       ;DITTO
0743  06 03         1233   1233       LD    B,3              ;THREE BYTES
0745  cd d8 09      1234   1234       CALL  FADDT            ;GO ADD TWO TOGETHER
0748  d0            1235   1235       RET   NC               ;RETURN IF NO CARRY
0749  21 2a 10      1236   1236 FADX1 LD    HL,FACC          ;GET ADDR OF ACC
074c  7e            1237   1237       LD    A,(HL)           ;LOAD THE EXPON
074d  e6 80         1238   1238       AND   80H              ;ISOLATE SIGN
074f  47            1239   1239       LD    B,A              ;SAVE SIGN
0750  7e            1240   1240       LD    A,(HL)           ;GET EXPON
0751  cd ac 09      1241   1241       CALL  FEXP             ;GO GET EXPONENT
0754  3c            1242   1242       INC   A                ;ADD ONE
0755  e6 7f         1243   1243       AND   7FH              ;ISOLATE
0757  b0            1244   1244       OR    B                ;PUT BACK SIGN
0758  77            1245   1245       LD    (HL),A           ;PUT IT DOWN
0759  23            1246   1246       INC   HL               ;POINT DATA
075a  16 10         1247   1247       LD    D,10H            ;(THE CARRY)
075c  06 03         1248   1248       LD    B,3              ;CTR
075e  cd e4 09      1249   1249       CALL  FSHFT            ;GO SHIFT IT
0761  c9            1250   1250       RET                    ;RETURN
0762                1251   1251 FADD1 EQU   $
0762  21 32 10      1252   1252       LD    HL,FTEMP+4       ;POINT TEMP2 AREA
0765  06 04         1253   1253       LD    B,4              ;PREPARE TO SAVE ACC
0767  cd 61 0e      1254   1254       CALL  COPYD            ;GO COPY
076a  11 2d 10      1255   1255 FADX2 LD    DE,FACC+3        ;POINT LOW ACC
076d  21 31 10      1256   1256       LD    HL,FTEMP+3          ;AND LOW TEMP
0770  06 03         1257   1257       LD    B,3              ;CTR
0772  cd b4 09      1258   1258       CALL  FSUBT            ;GO SUBTRACT THE TWO
0775  d2 90 07      1259   1259       JP    NC,FNORM         ;BRIF NO BORROW
0778  11 2a 10      1260   1260       LD    DE,FACC          ;POINT ACC
Z80-Assembler		Release 1.6				Page 22
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
077b  21 2e 10      1261   1261       LD    HL,FTEMP         ;POINT TEMP
077e  06 08         1262   1262       LD    B,8              ;CTR
0780  cd 58 0e      1263   1263       CALL  COPYH            ;GO COPY
0783  11 2a 10      1264   1264       LD    DE,FACC          ;POINT
0786  21 2e 10      1265   1265       LD    HL,FTEMP         ;TEMP
0789  7e            1266   1266       LD    A,(HL)           ;GET ORIG ACC EXPONENT
078a  ee 80         1267   1267       XOR   80H              ;REVERSE SIGN
078c  12            1268   1268       LD    (DE),A           ;PUT TO NEW ACC
078d  c3 6a 07      1269   1269       JP    FADX2            ;GO SUBTRACT AGAIN
                    1270   1270 *HEADING IMSAI 8080 4K BASIC
0790                1271   1271 FNORM EQU   $
                    1272   1272 ;
                    1273   1273 ;
                    1274   1274 ;NORMALIZE THE FLOATING ACCUMULATOR
                    1275   1275 ;THAT IS, THE FIRST DIGIT MUST BE SIGNIFICANT
                    1276   1276 ;
                    1277   1277 ;
0790  21 2b 10      1278   1278       LD    HL,FACC+1        ;POINT TO FIRST BYTE
0793  7e            1279   1279       LD    A,(HL)           ;LOAD IT
0794  e6 f0         1280   1280       AND   0F0H             ;ISOLATE
0796  c0            1281   1281       RET   NZ               ;RETURN IF ALREADY NORMALIZED
0797  7e            1282   1282       LD    A,(HL)           ;GET THE BYTE
0798  23            1283   1283       INC   HL               ;POINT NEXT
0799  b6            1284   1284       OR    (HL)             ;OR THE NEXT BYTE
079a  23            1285   1285       INC   HL               ;POINT LAST
079b  b6            1286   1286       OR    (HL)             ;OR THAT BYTE (ACC HAS LOGICAL S
079c  c2 a5 07      1287   1287       JP    NZ,FNOR1         ;BRIF NOT ZERO
079f  21 2a 10      1288   1288       LD    HL,FACC          ;ELSE POINT FLOAT ACC
07a2  36 00         1289   1289       LD    (HL),0           ;CLEAR THE EXPONENT
07a4  c9            1290   1290       RET                    ;RETURN
07a5  21 2d 10      1291   1291 FNOR1 LD    HL,FACC+3        ;POINT LST BYTE
07a8  06 03         1292   1292       LD    B,3              ;3 BYTE LOOP
07aa  16 00         1293   1293       LD    D,0              ;INIT CARRY OVER
07ac  7e            1294   1294 FNOR2 LD    A,(HL)           ;GET A BYTE
07ad  4f            1295   1295       LD    C,A              ;SAVE IT
07ae  e7            1296   1296       RST   RST4             ;SHIFT LEFT 4 BITS
07af  b2            1297   1297       OR    D                ;PLUS PREV SHIFT OUT
07b0  77            1298   1298       LD    (HL),A           ;PUT BACK
07b1  79            1299   1299       LD    A,C              ;GET SAVED BYTE
07b2  cd f7 0e      1300   1300       CALL  RIGHT            ;SHIFT RIGHT 4 BITS
07b5  57            1301   1301       LD    D,A              ;SAVE FOR NEXT TIME
07b6  2b            1302   1302       DEC   HL               ;POINT NEXT BYTE
07b7  05            1303   1303       DEC   B                ;DECR CTR
07b8  c2 ac 07      1304   1304       JP    NZ,FNOR2         ;LOOP
07bb  7e            1305   1305       LD    A,(HL)           ;GET EXPONENT
07bc  e6 80         1306   1306       AND   80H              ;ISOLATE SIGN
07be  47            1307   1307       LD    B,A              ;SAVE
07bf  7e            1308   1308       LD    A,(HL)           ;GET AGAIN
07c0  cd ac 09      1309   1309       CALL  FEXP             ;GO GET EXPONENT
07c3  3d            1310   1310       DEC   A                ;MINUS ONE
07c4  e6 7f         1311   1311       AND   7FH              ;TURN OFF HIGH BIT
07c6  b0            1312   1312       OR    B                ;PLUS SAVED SIGN
07c7  77            1313   1313       LD    (HL),A           ;PUT BACK
07c8  c3 90 07      1314   1314       JP    FNORM            ;GO NORMALIZE
                    1315   1315 *HEADING IMSAI 8080 4K BASIC
07cb                1316   1316 FSUB  EQU   $
                    1317   1317 ;
                    1318   1318 ;
                    1319   1319 ;FLOATING POINT SUBTRACT THE NUMBER AT (HL) FROM THE FACC
                    1320   1320 ;
Z80-Assembler		Release 1.6				Page 23
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                    1321   1321 ;
07cb  23            1322   1322       INC   HL               ;POINT FIRST DATA BYTE OF SUBTRA
07cc  7e            1323   1323       LD    A,(HL)           ;LOAD IT
07cd  b7            1324   1324       OR    A                ;TEST
07ce  c8            1325   1325       RET   Z                ;RETURN IF ZERO
07cf  2b            1326   1326       DEC   HL               ;POINT BACK
07d0  11 2e 10      1327   1327       LD    DE,FTEMP         ;GET TEMPORARY STORAGE AREA
07d3  06 04         1328   1328       LD    B,4              ;FOUR BYTES
07d5  cd 58 0e      1329   1329       CALL  COPYH            ;GO COPY
07d8  21 2e 10      1330   1330       LD    HL,FTEMP         ;POINT NEW AREA
07db  7e            1331   1331       LD    A,(HL)           ;GET EXPONENT
07dc  ee 80         1332   1332       XOR   80H              ;REVERSE SIGN
07de  77            1333   1333       LD    (HL),A           ;REPLACE
07df  c3 d2 06      1334   1334       JP    FADD             ;GO ADD THE TWO
                    1335   1335 *HEADING IMSAI 8080 4K BASIC
07e2                1336   1336 FMUL  EQU   $
                    1337   1337 ;
                    1338   1338 ;
                    1339   1339 ;FLOATING POINT MULTIPLY THE NUMBER AT (HL) TO THE FACC
                    1340   1340 ;
                    1341   1341 ;
07e2  cd 9e 09      1342   1342       CALL  FTEST            ;TEST FACC
07e5  c8            1343   1343       RET   Z                ;RETURN IF ZERO
07e6  23            1344   1344       INC   HL               ;POINT 1ST DIGIT OF MULTIPLIER
07e7  7e            1345   1345       LD    A,(HL)           ;LOAD IT
07e8  2b            1346   1346       DEC   HL               ;RESTORE
07e9  b7            1347   1347       OR    A                ;TEST IF ZERO
07ea  ca 28 00      1348   1348       JP    Z,RST5           ;GO LOAD TO FACC IF IT IS
07ed  11 2a 10      1349   1349       LD    DE,FACC          ;POINT EXP OF FACC
07f0  1a            1350   1350       LD    A,(DE)           ;LOAD EXPONENT
07f1  b7            1351   1351       OR    A                ;TEST IF 10 TO 0
07f2  c2 08 08      1352   1352       JP    NZ,FMUL1         ;BRIF NOT
07f5  13            1353   1353       INC   DE               ;POINT NEXT
07f6  1a            1354   1354       LD    A,(DE)           ;LOAD IT
07f7  fe 10         1355   1355       CP    10H              ;TEST IF 1
07f9  c2 08 08      1356   1356       JP    NZ,FMUL1         ;BRIF NOT
07fc  13            1357   1357       INC   DE               ;POINT NEXT
07fd  1a            1358   1358       LD    A,(DE)           ;LOAD IT
07fe  b7            1359   1359       OR    A                ;TEST IF ZERO
07ff  c2 08 08      1360   1360       JP    NZ,FMUL1         ;BRIF NOT
0802  13            1361   1361       INC   DE               ;POINT NEXT
0803  1a            1362   1362       LD    A,(DE)           ;LOAD IT
0804  b7            1363   1363       OR    A                ;TEST IF ZERO
0805  ca 28 00      1364   1364       JP    Z,RST5           ;GO LOAD IF FACC = 1.00000
0808  11 2a 10      1365   1365 FMUL1 LD    DE,FACC          ;POINT EXPONENT
080b  1a            1366   1366       LD    A,(DE)           ;LOAD IT
080c  cd ac 09      1367   1367       CALL  FEXP             ;GO GET EXPONENT
080f  47            1368   1368       LD    B,A              ;SAVE IN B
0810  7e            1369   1369       LD    A,(HL)           ;GET EXPONENT OF MULTIPLIER
0811  cd ac 09      1370   1370       CALL  FEXP             ;GO GET EXPONENT
0814  37            1371   1371       SCF                    ;TURN ON CY
0815  88            1372   1372       ADC   A,B              ;ADD EXPONENTS TOGETHER
0816  cd 8f 09      1373   1373       CALL  FOVUN            ;GO SEE IF OVERFLOW/UNDERFLOW
0819  e6 7f         1374   1374       AND   7FH              ;TURN OFF SIGN
081b  47            1375   1375       LD    B,A              ;SAVE
081c  1a            1376   1376       LD    A,(DE)           ;GET SIGN OF FACC
081d  ae            1377   1377       XOR   (HL)             ;PRODUCT SIGN IS NEG IF TWO SIGN
081e  e6 80         1378   1378       AND   80H              ;MASK
0820  b0            1379   1379       OR    B                ;PUT SIGN AND EXPONENT TOGETHER
0821  12            1380   1380       LD    (DE),A           ;PUT IN FACC
Z80-Assembler		Release 1.6				Page 24
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0822  e5            1381   1381       PUSH  HL               ;SAVE HL
0823  21 2e 10      1382   1382       LD    HL,FTEMP         ;POINT DIGIT 7 OF RESULT
0826  06 06         1383   1383       LD    B,6              ;LOOP CTR
0828  cd 50 0e      1384   1384       CALL  ZEROM            ;GO ZERO 6 BYTES
082b  11 2b 10      1385   1385       LD    DE,FACC+1        ;POINT 1ST DIGIT OF ACC
082e  06 03         1386   1386       LD    B,3              ;LOOP CTR
0830  1a            1387   1387 FMUL5 LD    A,(DE)           ;GET AN ACC DIGIT PAIR
0831  77            1388   1388       LD    (HL),A           ;PUT TO TEMP STORAGE
0832  af            1389   1389       XOR   A                ;ZERO A
0833  12            1390   1390       LD    (DE),A           ;CLEAR ACC
0834  13            1391   1391       INC   DE               ;POINT NEXT
0835  23            1392   1392       INC   HL               ;DITTO
0836  05            1393   1393       DEC   B                ;DECR CTR
0837  c2 30 08      1394   1394       JP    NZ,FMUL5         ;LOOP
083a  0e 06         1395   1395       LD    C,6              ;OUTER LOOP CTR
083c  e1            1396   1396       POP   HL               ;GET ADDR OF MULTIPLIER
083d  ff            1397   1397       RST   RST7             ;GO BUMP HL
083e  03            1398   1398       DEFB  3                ;BY THREE
083f  79            1399   1399 FMUL6 LD    A,C              ;GET CTR
0840  1f            1400   1400       RRA                    ;TEST IF EVEN/ODD
0841  7e            1401   1401       LD    A,(HL)           ;GET MULTIPLIER DIGIT PAIR
0842  da 4a 08      1402   1402       JP    C,FMUL7          ;BRIF LEFT NEEDED
0845  e6 0f         1403   1403       AND   0FH              ;MASK
0847  c3 4d 08      1404   1404       JP    FMUL8            ;GO AROUND
084a  cd f7 0e      1405   1405 FMUL7 CALL  RIGHT            ;SHIFT RIGHT 4 BITS
084d  47            1406   1406 FMUL8 LD    B,A              ;SAVE DIGIT
084e  e5            1407   1407       PUSH  HL               ;SAVE ADDRESS
084f  c5            1408   1408       PUSH  BC               ;SAVE COUNTERS
0850  48            1409   1409       LD    C,B              ;SWAP B/C
0851  b7            1410   1410       OR    A                ;TEST MULTIPLIER
0852  ca 64 08      1411   1411       JP    Z,FMUX1          ;BRIF ZERO
0855  11 30 10      1412   1412 FMUL9 LD    DE,FTEMP+2       ;POINT PRODUCT
0858  21 36 10      1413   1413       LD    HL,FTEMP+8       ;POINT MULTIPLICAND
085b  06 06         1414   1414       LD    B,6              ;6 DIGITS PARTICIPATE
085d  cd d8 09      1415   1415       CALL  FADDT            ;GO ADD
0860  0d            1416   1416       DEC   C                ;DECR OUTER LOOP CTR
0861  c2 55 08      1417   1417       JP    NZ,FMUL9         ;LOOP
0864  16 00         1418   1418 FMUX1 LD    D,0              ;INIT SHIFT DIGIT
0866  06 06         1419   1419       LD    B,6              ;LOOP CTR
0868  21 36 10      1420   1420       LD    HL,FTEMP+8       ;POINT MULTIPLICAND
086b  cd f4 09      1421   1421       CALL  FSHFX            ;GO SHIFT
086e  c1            1422   1422       POP   BC               ;RESTORE CTRS
086f  e1            1423   1423       POP   HL               ;ANDADDRESS
0870  0d            1424   1424       DEC   C                ;DECR CTR
0871  ca 7d 08      1425   1425       JP    Z,FMUX2          ;GO AROUND IF ZERO
0874  79            1426   1426       LD    A,C              ;LOAD THE CTR
0875  1f            1427   1427       RRA                    ;TEST EVEN/ODD
0876  da 3f 08      1428   1428       JP    C,FMUL6          ;LOOP IF ODD
0879  2b            1429   1429       DEC   HL               ;ELSE, POINT NEXT
087a  c3 3f 08      1430   1430       JP    FMUL6            ;LOOP
087d  21 2b 10      1431   1431 FMUX2 LD    HL,FACC+1        ;POINT MSD OF PRODUCT
0880  7e            1432   1432       LD    A,(HL)           ;GET MSD PAIR
0881  e6 f0         1433   1433       AND   0F0H             ;ISOLATE LEFT HALF
0883  c2 b1 08      1434   1434       JP    NZ,FMUX3         ;BRIF NORMALIZED
0886  06 05         1435   1435       LD    B,5              ;CTR
0888  54            1436   1436       LD    D,H              ;COPY HL
0889  5d            1437   1437       LD    E,L              ;TO DE
088a  7e            1438   1438 FMUX4 LD    A,(HL)           ;GET A PAIR OF DIGITS
088b  e7            1439   1439       RST   RST4             ;SHIFT RIGHT TO LEFT
088c  4f            1440   1440       LD    C,A              ;SAVE DIGIT
Z80-Assembler		Release 1.6				Page 25
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
088d  23            1441   1441       INC   HL               ;POINT NEXT PAIR
088e  7e            1442   1442       LD    A,(HL)           ;GET NEXT PAIR
088f  cd f7 0e      1443   1443       CALL  RIGHT            ;SHIFT LEFT TO RIGHT
0892  b1            1444   1444       OR    C                ;COMBINE
0893  12            1445   1445       LD    (DE),A           ;PUT DOWN
0894  13            1446   1446       INC   DE               ;POINT NEXT OUTPUT PAIR
0895  05            1447   1447       DEC   B                ;DECR CTR
0896  c2 8a 08      1448   1448       JP    NZ,FMUX4         ;LOOP
0899  7e            1449   1449       LD    A,(HL)           ;GET LAST PAIR
089a  e7            1450   1450       RST   RST4             ;SHIFT LEFT
089b  12            1451   1451       LD    (DE),A           ;PUT DOWN
089c  3a 2a 10      1452   1452       LD    A,(FACC)         ;GET EXPON & SIGN
089f  4f            1453   1453       LD    C,A              ;SAVE
08a0  e6 80         1454   1454       AND   80H              ;ISOLATE SIGN
08a2  47            1455   1455       LD    B,A              ;SAVE SIGN
08a3  79            1456   1456       LD    A,C              ;GET EXPON & SIGN
08a4  cd ac 09      1457   1457       CALL  FEXP             ;GO GET EXPON
08a7  3d            1458   1458       DEC   A                ;SUBTRACT ONE
08a8  e6 7f         1459   1459       AND   7FH              ;STRIP 8TH BIT
08aa  b0            1460   1460       OR    B                ;MERGE IN SIGN BIT
08ab  32 2a 10      1461   1461       LD    (FACC),A         ;PUT DOWN
08ae  c3 7d 08      1462   1462       JP    FMUX2            ;CONTINUE
08b1  3a 2e 10      1463   1463 FMUX3 LD    A,(FTEMP)        ;GET 1ST DIGIT PAIR FOLLOWING FA
08b4  c6 50         1464   1464       ADD   A,50H            ;ADD 5
08b6  27            1465   1465       DAA                    ;ADJUST
08b7  d2 90 07      1466   1466       JP    NC,FNORM         ;BRIF 4 OR LESS
08ba  21 2d 10      1467   1467 FROUN LD    HL,FACC+3        ;ELSE, POINT LSD OF FACC
08bd  06 03         1468   1468       LD    B,3              ;LOOP CTR
08bf  37            1469   1469       SCF                    ;TURN ON CY INDICATOR
08c0  7e            1470   1470 FMUX5 LD    A,(HL)           ;GET A DIGIT PAIR
08c1  ce 00         1471   1471       ADC   A,0              ;ADD THE CARRY
08c3  27            1472   1472       DAA                    ;ADJUST
08c4  77            1473   1473       LD    (HL),A           ;PUT BACK
08c5  2b            1474   1474       DEC   HL               ;POINT NEXT
08c6  05            1475   1475       DEC   B                ;DECR CTR
08c7  c2 c0 08      1476   1476       JP    NZ,FMUX5         ;LOOP
08ca  da 49 07      1477   1477       JP    C,FADX1          ;BRIF CARRY INTO 7 DIGITS
08cd  c3 90 07      1478   1478       JP    FNORM            ;GO NORMALIZE
                    1479   1479 *HEADING IMSAI 8080 4K BASIC
08d0                1480   1480 FDIV  EQU   $
                    1481   1481 ;
                    1482   1482 ;
                    1483   1483 ;FLOATING POINT DIVIDE THE NUMBER AT (HL) INTO FACC
                    1484   1484 ;
                    1485   1485 ;
08d0  cd 9e 09      1486   1486       CALL  FTEST            ;TEST IF FACC ZERO
08d3  c8            1487   1487       RET   Z                ;RETURN IF ZERO
08d4  23            1488   1488       INC   HL               ;POINT 1ST DIGIT OF DIVISOR
08d5  7e            1489   1489       LD    A,(HL)           ;LOAD IT
08d6  2b            1490   1490       DEC   HL               ;POINT BACK
08d7  b7            1491   1491       OR    A                ;TEST IF ZERO
08d8  ca 72 0e      1492   1492       JP    Z,OVERR          ;DIVISION BY ZERO = ERROR
08db  7e            1493   1493       LD    A,(HL)           ;LOAD EXPONENT OF DIVISOR
08dc  cd ac 09      1494   1494       CALL  FEXP             ;GO GET EXPON
08df  47            1495   1495       LD    B,A              ;SAVE IT
08e0  11 2a 10      1496   1496       LD    DE,FACC          ;POINT EXPONENT OF DIVIDEND
08e3  1a            1497   1497       LD    A,(DE)           ;LOAD IT
08e4  cd ac 09      1498   1498       CALL  FEXP             ;GO GET EXPON
08e7  90            1499   1499       SUB   B                ;SUBTRACT THE TWO EXPONENTS
08e8  cd 8f 09      1500   1500       CALL  FOVUN            ;GO SAE IF OVERFLOW/UNDERFLOW
Z80-Assembler		Release 1.6				Page 26
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
08eb  e6 7f         1501   1501       AND   7FH              ;TRUNCATE TO 7 BITS
08ed  47            1502   1502       LD    B,A              ;SAVE IT
08ee  1a            1503   1503       LD    A,(DE)           ;GET EXPONENT
08ef  ae            1504   1504       XOR   (HL)             ;IF SIGNS ARE EQUAL, RESULT IS P
08f0  e6 80         1505   1505       AND   80H              ;MASK OFF UNUSED BITS
08f2  b0            1506   1506       OR    B                ;CREATE SIGN OF QUOTIENT
08f3  12            1507   1507       LD    (DE),A           ;PUT TO FACC
08f4  e5            1508   1508       PUSH  HL               ;SAVE ADDR
08f5  13            1509   1509       INC   DE               ;POINT MSD OF DIVIDEND
08f6  21 2e 10      1510   1510       LD    HL,FTEMP         ;POINT TEMPORARY STORAGE
08f9  36 00         1511   1511       LD    (HL),0           ;CLEAR HIGH ORDER POSITION
08fb  23            1512   1512       INC   HL               ;POINT NEXT
08fc  06 03         1513   1513       LD    B,3              ;LOOP CTR
08fe  1a            1514   1514 FDIV3 LD    A,(DE)           ;GET BYTE FROM FACC
08ff  77            1515   1515       LD    (HL),A           ;PUT TO FTEMP
0900  af            1516   1516       XOR   A                ;CLEAR A
0901  12            1517   1517       LD    (DE),A           ;ZERO FACC
0902  23            1518   1518       INC   HL               ;POINT NEXT
0903  13            1519   1519       INC   DE               ;DITTO
0904  05            1520   1520       DEC   B                ;DECR CTR
0905  c2 fe 08      1521   1521       JP    NZ,FDIV3         ;LOOP
0908  32 39 10      1522   1522       LD    (DIVSW),A        ;RESET SWITCH
090b  77            1523   1523       LD    (HL),A           ;CLEAR HIGH PAIR OF DIVISOR
090c  d1            1524   1524       POP   DE               ;GET ADDR
090d  06 03         1525   1525       LD    B,3              ;LOOP CTR
090f  13            1526   1526       INC   DE               ;POINT MSD OF DIVISOR
0910  23            1527   1527       INC   HL               ;AND OF DIVIDEND
0911  cd 61 0e      1528   1528       CALL  COPYD            ;GO MOVE IT
0914  0e 06         1529   1529       LD    C,6              ;OUTER LOOP CTR
0916  06 ff         1530   1530 FDIV5 LD    B,-1             ;INIT CTR
0918  11 31 10      1531   1531 FDIV7 LD    DE,FTEMP+3       ;POINT DIVIDEND
091b  21 35 10      1532   1532       LD    HL,FTEMP+7       ;POINT DIVISOR
091e  c5            1533   1533       PUSH  BC               ;SAVE BC
091f  06 04         1534   1534       LD    B,4              ;LOOP CTR
0921  cd b4 09      1535   1535       CALL  FSUBT            ;GO SUBTRACT THE TWO
0924  c1            1536   1536       POP   BC               ;GET COUNTERS
0925  04            1537   1537       INC   B                ;COUNT ONE MORE
0926  d2 18 09      1538   1538       JP    NC,FDIV7         ;LOOP IF NOT TOO FAR
0929  3a 39 10      1539   1539       LD    A,(DIVSW)        ;GET SWITCH
092c  b7            1540   1540       OR    A                ;TEST IT
092d  c2 86 09      1541   1541       JP    NZ,FDIV1         ;BRIF SET
0930  c5            1542   1542       PUSH  BC               ;SAVE BC
0931  0e 03         1543   1543       LD    C,3              ;THREE BYTE LOOP
0933  21 2d 10      1544   1544       LD    HL,FACC+3        ;POINT LSD OF QUOTIENT
0936  7e            1545   1545 FDIX1 LD    A,(HL)           ;GET DIGIT PAIR
0937  57            1546   1546       LD    D,A              ;SAVE IT
0938  e7            1547   1547       RST   RST4             ;SHIFT LEFT
0939  b0            1548   1548       OR    B                ;MERGE WITH PREV
093a  77            1549   1549       LD    (HL),A           ;PUT BACK
093b  7a            1550   1550       LD    A,D              ;GET SAVED PAIR
093c  cd f7 0e      1551   1551       CALL  RIGHT            ;SHIFT RIGHT
093f  47            1552   1552       LD    B,A              ;SAVE IT
0940  2b            1553   1553       DEC   HL               ;POINT NEXT
0941  0d            1554   1554       DEC   C                ;DECR CTR
0942  c2 36 09      1555   1555       JP    NZ,FDIX1         ;LOOP
0945  c1            1556   1556       POP   BC               ;GET CTRS
0946  11 31 10      1557   1557       LD    DE,FTEMP+3       ;POINT PREV
0949  21 35 10      1558   1558       LD    HL,FTEMP+7       ;POINT DIVISOR
094c  06 04         1559   1559       LD    B,4              ;LOOP CTR
094e  cd d8 09      1560   1560       CALL  FADDT            ;GO ADD
Z80-Assembler		Release 1.6				Page 27
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0951  06 04         1561   1561       LD    B,4              ;INNER CTR
0953  21 31 10      1562   1562       LD    HL,FTEMP+3       ;POINT LSD OF DIVIDEND
0956  16 00         1563   1563       LD    D,0              ;SAVE DIGIT
0958  cd f4 09      1564   1564       CALL  FSHFX            ;GO SHIFT
095b  0d            1565   1565       DEC   C                ;DECR OUTER CTR
095c  c2 16 09      1566   1566       JP    NZ,FDIV5         ;LOOP IF NOT ZERO
095f  3a 2b 10      1567   1567       LD    A,(FACC+1)       ;GET MSD OF QUOTIENT
0962  e6 f0         1568   1568       AND   0F0H             ;ISOLATE LEFT HALF
0964  c2 7e 09      1569   1569       JP    NZ,FDIX2         ;BRIF NORMALIZED
0967  3a 2a 10      1570   1570       LD    A,(FACC)         ;GET EXPON & SIGN
096a  47            1571   1571       LD    B,A              ;SAVE
096b  e6 80         1572   1572       AND   80H              ;ISOLATE SIGN
096d  4f            1573   1573       LD    C,A              ;SAVE
096e  78            1574   1574       LD    A,B              ;GET EXPON & SIGN
096f  cd ac 09      1575   1575       CALL  FEXP             ;GO GET EXPONENT
0972  3d            1576   1576       DEC   A                ;SUBTRACT ONE
0973  e6 7f         1577   1577       AND   7FH              ;TRUNCATE 8TH BIT
0975  b1            1578   1578       OR    C                ;MERGE SIGN BIT
0976  32 2a 10      1579   1579       LD    (FACC),A         ;PUT DOWN
0979  0e 01         1580   1580       LD    C,1              ;NEW LOOP CTR
097b  c3 16 09      1581   1581       JP    FDIV5            ;ONE MORE TIME
097e  3e 01         1582   1582 FDIX2 LD    A,1              ;GET A ONE
0980  32 39 10      1583   1583       LD    (DIVSW),A        ;SET SWITCH
0983  c3 16 09      1584   1584       JP    FDIV5            ;GO ONE MORE DIGIT
0986  78            1585   1585 FDIV1 LD    A,B              ;GET THE EXTRA QUOTIENT DIGIT
0987  fe 05         1586   1586       CP    5                ;COMPARE TO 5
0989  da 90 07      1587   1587       JP    C,FNORM          ;BRIF LESS
098c  c3 ba 08      1588   1588       JP    FROUN            ;ELSE, GO ROUND IT
098f                1589   1589 FOVUN EQU   $                ;TEST IF EXPONENT OVERFLOW/UNDER
098f  f2 98 09      1590   1590       JP    P,FOVUX          ;BRIF POSITIVE
0992  fe c1         1591   1591       CP    0C1H             ;TEST FOR UNDERFLOW
0994  d0            1592   1592       RET   NC               ;RETIFNOT UNDERFLOW
0995  c3 72 0e      1593   1593       JP    OVERR            ;ELSE, ERROR
0998  fe 40         1594   1594 FOVUX CP    40H              ;TEST IF OVERFLOW
099a  d8            1595   1595       RET   C                ;RETIF LESS
099b  c3 72 0e      1596   1596       JP    OVERR            ;ELSE, OVER/UNDEFLOW
                    1597   1597 *HEADING IMSAI 8080 4K BASIC
099e                1598   1598 FTEST EQU   $
                    1599   1599 ;
                    1600   1600 ;TEST THE SIGN OF THE NUMBER IN THE FACC
                    1601   1601 ;RETURN WITH S & Z ZET TO SIGN
                    1602   1602 ;
099e  3a 2b 10      1603   1603       LD    A,(FACC+1)       ;GET MSD
09a1  b7            1604   1604       OR    A                ;TEST IT
09a2  c8            1605   1605       RET   Z                ;RETURN IF ZERO
09a3  3a 2a 10      1606   1606       LD    A,(FACC)         ;GET SIGN & EXPON BYTE
09a6  f6 7f         1607   1607       OR    7FH              ;TEST SIGN BIT ONLY
09a8  3a 2a 10      1608   1608       LD    A,(FACC)         ;RE-LOAD EXPON BYTE
09ab  c9            1609   1609       RET                    ;THEN RETURN
                    1610   1610 *HEADING IMSAI 8080 4K BASIC
09ac                1611   1611 FEXP  EQU   $
                    1612   1612 ;
                    1613   1613 ;EXPAND EXPONENT INTO 8 BINARY BITS
                    1614   1614 ;
09ac  17            1615   1615       RLA                    ;DROP MANTISSA SIGN
09ad  b7            1616   1616       OR    A                ;TEST SIGN OF EXPON
09ae  f2 b2 09      1617   1617       JP    P,FEXP1          ;BRIF POSITIVE
09b1  37            1618   1618       SCF                    ;ELSE, TURN ON CY
09b2  1f            1619   1619 FEXP1 RRA                    ;SHIFT BACK
09b3  c9            1620   1620       RET                    ;RETURN
Z80-Assembler		Release 1.6				Page 28
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                    1621   1621 *HEADING IMSAI 8080 4K BASIC
09b4                1622   1622 FSUBT EQU   $
                    1623   1623 ;
                    1624   1624 ;DECIMAL SUBTRACT THE TWO 6 DIGIT NUMBERS (DE) & (HL)
                    1625   1625 ;
09b4  af            1626   1626       XOR   A                ;CLEAR STATUS
09b5  c5            1627   1627 FSUX1 PUSH  BC               ;SAVE CTR
09b6  1a            1628   1628       LD    A,(DE)           ;GET ACC DIGIT PAIR
09b7  9e            1629   1629       SBC   A,(HL)             ;SUBTRACT PAIR FROM SUBTRAHEND
09b8  f5            1630   1630       PUSH  AF               ;SAVE A, FLAGS
09b9  c1            1631   1631       POP   BC               ;GET A, FLAGS IN BC
09ba  79            1632   1632       LD    A,C              ;GET FLAGS
09bb  e6 10         1633   1633       AND   10H              ;TEST AC STATUS
09bd  c2 c4 09      1634   1634       JP    NZ,FSUX2         ;BRIF SET
09c0  78            1635   1635       LD    A,B              ;GET DIFFERENCE
09c1  d6 06         1636   1636       SUB   06H              ;ADJUST RIGHT SIDE
09c3  47            1637   1637       LD    B,A              ;SAVE
09c4  79            1638   1638 FSUX2 LD    A,C              ;GET FLAGS
09c5  1f            1639   1639       RRA                    ;TEST CY
09c6  d2 cd 09      1640   1640       JP    NC,FSUX3         ;BRIF NOT SET
09c9  78            1641   1641       LD    A,B              ;GET DIFF
09ca  d6 60         1642   1642       SUB   60H              ;ADJUST LEFT SIDE
09cc  47            1643   1643       LD    B,A              ;SAVE
09cd  c5            1644   1644 FSUX3 PUSH  BC               ;RESAVE A, FLAGS
09ce  f1            1645   1645       POP   AF               ;RE-LOAD DIFFERENCE, FLAGS
09cf  12            1646   1646       LD    (DE),A           ;PUT TO ACC
09d0  c1            1647   1647       POP   BC               ;GET BC
09d1  1b            1648   1648       DEC   DE               ;POINT PRIOR
09d2  2b            1649   1649       DEC   HL               ;DITTO
09d3  05            1650   1650       DEC   B                ;DECR CTR
09d4  c2 b5 09      1651   1651       JP    NZ,FSUX1         ;LOOP
09d7  c9            1652   1652       RET                    ;RETURN
                    1653   1653 *HEADING IMSAI 8080 4K BASIC
09d8                1654   1654 FADDT EQU   $
                    1655   1655 ;
                    1656   1656 ;ADD TWO DECIMAL NUMBERS (DE) & (HL)
                    1657   1657 ;
09d8  af            1658   1658       XOR   A                ;CLEAR STATUS
09d9  1a            1659   1659 FADXT LD    A,(DE)           ;GET PAIR
09da  8e            1660   1660       ADC   A,(HL)           ;ADD OTHER PAIR
09db  27            1661   1661       DAA                    ;ADJUST
09dc  12            1662   1662       LD    (DE),A           ;PUT DOWN
09dd  1b            1663   1663       DEC   DE               ;POINT NEXT
09de  2b            1664   1664       DEC   HL               ;DITTO
09df  05            1665   1665       DEC   B                ;DECR LOOP CTR
09e0  c2 d9 09      1666   1666       JP    NZ,FADXT         ;LOOP
09e3  c9            1667   1667       RET                    ;RETURN
                    1668   1668 *HEADING IMSAI 8080 4K BASIC
09e4                1669   1669 FSHFT EQU   $
                    1670   1670 ;
                    1671   1671 ;INCREMENTING SHIFT RIGHT
                    1672   1672 ;
09e4  7e            1673   1673       LD    A,(HL)           ;GET A BYTE
09e5  5f            1674   1674       LD    E,A              ;SAVE IT
09e6  cd f7 0e      1675   1675       CALL  RIGHT            ;SHIFT RIGHT
09e9  b2            1676   1676       OR    D                ;PLUS PREV
09ea  77            1677   1677       LD    (HL),A           ;STORE
09eb  7b            1678   1678       LD    A,E              ;GET PREV
09ec  e7            1679   1679       RST   RST4             ;SHIFT LEFT
09ed  57            1680   1680       LD    D,A              ;SAVE FOR NEXT
Z80-Assembler		Release 1.6				Page 29
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
09ee  23            1681   1681       INC   HL               ;POINT NEXT
09ef  05            1682   1682       DEC   B                ;DECR CTR
09f0  c2 e4 09      1683   1683       JP    NZ,FSHFT         ;LOOP
09f3  c9            1684   1684       RET                    ;RETURN
                    1685   1685 *HEADING IMSAI 8080 4K BASIC
09f4                1686   1686 FSHFX EQU   $
                    1687   1687 ;
                    1688   1688 ;DECREMENTING SHIFT RIGHT
                    1689   1689 ;
09f4  7e            1690   1690       LD    A,(HL)           ;GET A BYTE
09f5  cd f7 0e      1691   1691       CALL  RIGHT            ;SHIFT RIGHT
09f8  5f            1692   1692       LD    E,A              ;SAVE IT
09f9  7e            1693   1693       LD    A,(HL)           ;RELOAD
09fa  e7            1694   1694       RST   RST4             ;SHIFT LEFT
09fb  b2            1695   1695       OR    D                ;MERGE
09fc  77            1696   1696       LD    (HL),A           ;REPLACE
09fd  53            1697   1697       LD    D,E              ;UPDATE SAVED
09fe  2b            1698   1698       DEC   HL               ;POINT NEXT
09ff  05            1699   1699       DEC   B                ;DECR CTR
0a00  c2 f4 09      1700   1700       JP    NZ,FSHFX         ;LOOP
0a03  c9            1701   1701       RET                    ;RETURN
                    1702   1702 ;
                    1703   1703 ;
                    1704   1704 *HEADING IMSAI 8080 4K BASIC
0a04                1705   1705 ABS   EQU   $
                    1706   1706 ;
                    1707   1707 ;
                    1708   1708 ;RETURN THE ABSOLUTE VALUE OF THE FLOATING ACCUMULATOR
                    1709   1709 ;
                    1710   1710 ;
0a04  3a 2a 10      1711   1711       LD    A,(FACC)         ;GET EXPONENT
0a07  e6 7f         1712   1712       AND   7FH              ;STRIP NEGATIVE SIGN
0a09  32 2a 10      1713   1713       LD    (FACC),A         ;REPLACE
0a0c  c9            1714   1714       RET                    ;RETURN
                    1715   1715 *HEADING IMSAI 8080 4K BASIC
0a0d                1716   1716 SGN   EQU   $
                    1717   1717 ;
                    1718   1718 ;
                    1719   1719 ;RETURNS THE SIGN OF THE FLOATING ACCUMULATOR
                    1720   1720 ;THAT IS:
                    1721   1721 ; 1 IF FACC > 0
                    1722   1722 ; 0 IF FACC = 0
                    1723   1723 ;-1 IF FACC < 0
                    1724   1724 ;
0a0d  cd 9e 09      1725   1725       CALL FTEST             ;GO TEST FACC
0a10  c8            1726   1726       RET   Z                ;RETURN IF ZERO
0a11  e6 80         1727   1727       AND   80H              ;ISOLATE IT
0a13  f5            1728   1728       PUSH  AF               ;SAVE IT
0a14  21 f0 0f      1729   1729       LD    HL,ONE           ;GET ADDRESS OF CONSTANT 1
0a17  ef            1730   1730       RST   RST5             ;GO LOAD IT
0a18  f1            1731   1731       POP   AF               ;RESTORE SIGN
0a19  32 2a 10      1732   1732       LD    (FACC),A         ;SET THE SIGN & EXPONENT
0a1c  c9            1733   1733       RET                    ;RETURN
                    1734   1734 *HEADING IMSAI 8080 4K BASIC
0a1d                1735   1735 INT   EQU   $
                    1736   1736 ;
                    1737   1737 ;
                    1738   1738 ;RETURNS THE GREATEST INTEGER NOT LARGER THAN THE ABSOLUTE VALUE
                    1739   1739 ;
                    1740   1740 ;
Z80-Assembler		Release 1.6				Page 30
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0a1d  21 2a 10      1741   1741       LD    HL,FACC          ;POINT FLOAT ACC
0a20  7e            1742   1742       LD    A,(HL)           ;GET EXPONENT
0a21  e6 40         1743   1743       AND   40H              ;GET SIGN OF CHARACTERISTIC
0a23  ca 2b 0a      1744   1744       JP    Z,INT2           ;BRIF GE ZERO
0a26  06 04         1745   1745       LD    B,4              ;FOUR BYTE LOOP
0a28  c3 50 0e      1746   1746       JP    ZEROM            ;ZERO FACC AND RETURN
0a2b  7e            1747   1747 INT2  LD    A,(HL)           ;GET EXPONENT
0a2c  e6 3f         1748   1748       AND   3FH              ;ISOLATE CHARACTERISTIC
0a2e  fe 05         1749   1749       CP    5                ;TEST FOR FIVE OR LARGER
0a30  f0            1750   1750       RET   P                ;RETURN IF >= 5
0a31  47            1751   1751       LD    B,A              ;SAVE EXPONENT
0a32  3e 05         1752   1752       LD    A,5              ;GET CONSTANT
0a34  90            1753   1753       SUB   B                ;MINUS EXPONENT = LOOP CTR
0a35  47            1754   1754       LD    B,A              ;SAVE IT
0a36  21 2d 10      1755   1755       LD    HL,FACC+3        ;POINT LSD
0a39  7e            1756   1756 INT3  LD    A,(HL)           ;LOAD A BYTE
0a3a  e6 f0         1757   1757       AND   0F0H             ;DROP RIGHT HALF
0a3c  77            1758   1758       LD    (HL),A           ;PUT BACK
0a3d  05            1759   1759       DEC   B                ;DECR CTR
0a3e  c8            1760   1760       RET   Z                ;RETURN IF ZERO
0a3f  36 00         1761   1761       LD    (HL),0           ;ZERO LEFT HALF
0a41  2b            1762   1762       DEC   HL               ;POINT NEXT
0a42  05            1763   1763       DEC   B                ;DECR CTR
0a43  c2 39 0a      1764   1764       JP    NZ,INT3          ;LOOP
0a46  c9            1765   1765       RET                    ;CONTINUE EVALUATION
                    1766   1766 *HEADING IMSAI 8080 4K BASIC
0a47                1767   1767 SQR   EQU   $
                    1768   1768 ;
                    1769   1769 ;
                    1770   1770 ;COMPUTE THE SQUARE ROOT OF THE FACC
                    1771   1771 ;USES NEWTON'S THIRD ORDER ITERATION
                    1772   1772 ;
                    1773   1773 ;
0a47  cd 9e 09      1774   1774       CALL  FTEST            ;GO GET SIGN OF FACC
0a4a  fa 72 0e      1775   1775       JP    M,OVERR          ;BRIF SQUARE ROOT OF NEGATIVE
0a4d  c8            1776   1776       RET   Z                ;RETURN IF SQUARE ROOT OF ZERO
0a4e  21 42 10      1777   1777       LD    HL,ORIGS         ;POINT TO TEMP AREA
0a51  f7            1778   1778       RST   RST6             ;SAVE ORIGINAL NUMBER
0a52  21 f0 0f      1779   1779       LD    HL,ONE           ;POINT CONSTANT
0a55  cd d2 06      1780   1780       CALL  FADD             ;ADD ONE
0a58  21 f4 0f      1781   1781       LD    HL,TWO           ;POINT CONSTANT
0a5b  cd d0 08      1782   1782       CALL  FDIV             ;DIVIDE BY TWO
                    1783   1783 ;
                    1784   1784 ;FIRST APPROXIMATION = (X+1)/2
                    1785   1785 ;
0a5e  21 46 10      1786   1786 SQRLP LD    HL,TSTSQ         ;GET ADDR OF TEST
0a61  f7            1787   1787       RST   RST6             ;SAVE IT
0a62  21 46 10      1788   1788       LD    HL,TSTSQ         ;POINT PREV ITERATION
0a65  cd e2 07      1789   1789       CALL  FMUL             ;SQUARE IT
0a68  21 4a 10      1790   1790       LD    HL,TST2S         ;POINT SAVE AREA
0a6b  f7            1791   1791       RST   RST6             ;SAVE IT
0a6c  21 42 10      1792   1792       LD    HL,ORIGS         ;GET ORIGINAL NUMBER
0a6f  cd cb 07      1793   1793       CALL  FSUB             ;SUBTRACT FROM PREV**2
0a72  cd 9e 09      1794   1794       CALL  FTEST            ;GET SIGN OF DIFFERENCE
0a75  fa c2 0a      1795   1795       JP    M,SQRGO          ;BRIF PREV**2 < ORIGINAL
0a78  ca c2 0a      1796   1796       JP    Z,SQRGO          ;BRIF PREV**2 = ORIGINAL
0a7b  21 4a 10      1797   1797       LD    HL,TST2S         ;GET PREV**2
0a7e  ef            1798   1798       RST   RST5             ;GO LOAD IT
0a7f  21 f8 0f      1799   1799       LD    HL,THREE         ;POINT CONSTANT OF 3
0a82  cd e2 07      1800   1800       CALL  FMUL             ;MULTIPLY WITH PREV**2
Z80-Assembler		Release 1.6				Page 31
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0a85  21 42 10      1801   1801       LD    HL,ORIGS         ;GET ORIGINAL NUMBER
0a88  cd d2 06      1802   1802       CALL  FADD             ;GO ADD
0a8b  21 4e 10      1803   1803       LD    HL,SQRX          ;POINT TEMP AREA
0a8e  f7            1804   1804       RST   RST6             ;SAVE DIVISOR
0a8f  21 f8 0f      1805   1805       LD    HL,THREE         ;POINT CONSTANT OF 3
0a92  ef            1806   1806       RST   RST5             ;GO LOAD IT
0a93  21 42 10      1807   1807       LD    HL,ORIGS         ;GET ORIGINAL NUMBER
0a96  cd e2 07      1808   1808       CALL  FMUL             ;MULTIPLY BY THREE
0a99  21 4a 10      1809   1809       LD    HL,TST2S         ;GET SQUARE OF PREV ITERATION
0a9c  cd d2 06      1810   1810       CALL  FADD             ;GO ADD IT
0a9f  21 46 10      1811   1811       LD    HL,TSTSQ         ;GET PREV ITERATION
0aa2  cd e2 07      1812   1812       CALL  FMUL             ;GO MULTIPLY
0aa5  21 4e 10      1813   1813       LD    HL,SQRX          ;POINT DIVISOR
0aa8  cd d0 08      1814   1814       CALL  FDIV             ;GO DIVIDE
0aab  21 4e 10      1815   1815       LD    HL,SQRX          ;POINT TEMP AREA
0aae  f7            1816   1816       RST   RST6             ;SAVE IT
0aaf  21 46 10      1817   1817       LD    HL,TSTSQ         ;GET PREV ESTIMATE
0ab2  cd cb 07      1818   1818       CALL  FSUB             ;GO COMPARE THEM
0ab5  21 4e 10      1819   1819       LD    HL,SQRX          ;POINT THIS ANSWER
0ab8  cd 9e 09      1820   1820       CALL  FTEST            ;GET SIGN OF DIFFERENCE
0abb  ca c5 0a      1821   1821       JP    Z,SQRGX          ;BRIF SAME GUESS
0abe  ef            1822   1822       RST   RST5             ;ELSE, LOAD THIS GUESS
                    1823   1823 ;NEXT ITERATION = PREV*(3*X+PREV**2)/(3*PREV**2+X)
0abf  c3 5e 0a      1824   1824       JP    SQRLP            ;LOOP
0ac2  21 46 10      1825   1825 SQRGO LD    HL,TSTSQ         ;POINT SQUARE ROOT
0ac5  ef            1826   1826 SQRGX RST   RST5             ;GO LOAD ACC
0ac6  c9            1827   1827       RET                    ;THEN RETURN
                    1828   1828 *HEADING IMSAI 8080 4K BASIC
0ac7                1829   1829 NEG   EQU   $
                    1830   1830 ;
                    1831   1831 ;
                    1832   1832 ;REVERSES THE SIGN OF THE FLOATING ACC
                    1833   1833 ;
                    1834   1834 ;
0ac7  cd 9e 09      1835   1835       CALL  FTEST            ;GET SIGN OF FACC
0aca  c8            1836   1836       RET   Z                ;RETURN IF ZERO
0acb  ee 80         1837   1837       XOR   80H              ;REVERSE SIGN
0acd  32 2a 10      1838   1838       LD    (FACC),A         ;RESTORE EXPONENT
0ad0  c9            1839   1839       RET                    ;CONTINUE EVALUATION
                    1840   1840 *HEADING IMSAI 8080 4K BASIC
0ad1                1841   1841 RND   EQU   $
                    1842   1842 ;
                    1843   1843 ;
                    1844   1844 ;PSEUDO RANDOM NUMBER GENERATOR
                    1845   1845 ;
                    1846   1846 ;
0ad1  21 64 10      1847   1847       LD    HL,RNDNU         ;POINT PREV RND
0ad4  ef            1848   1848       RST   RST5             ;LOAD TO FACC
0ad5  21 fc 0f      1849   1849       LD    HL,RNDX          ;POINT MULTIPLIER
0ad8  cd e2 07      1850   1850       CALL  FMUL             ;GO MULTIPLY
0adb  21 2a 10      1851   1851       LD    HL,FACC          ;POINT RESULT
0ade  36 7f         1852   1852       LD    (HL),7FH         ;DEFAULT . XXXXXX
0ae0  23            1853   1853       INC   HL               ;POINT MSD
0ae1  46            1854   1854       LD    B,(HL)           ;LOAD IT
0ae2  23            1855   1855       INC   HL               ;POINT MSD+2
0ae3  4e            1856   1856       LD    C,(HL)           ;LOAD IT
0ae4  70            1857   1857       LD    (HL),B           ;SWAP BYTES
0ae5  2b            1858   1858       DEC   HL               ;POINT BACK MSD
0ae6  71            1859   1859       LD    (HL),C           ;MOV MSD+2
0ae7  cd 90 07      1860   1860       CALL  FNORM            ;GO NORMALIZE
Z80-Assembler		Release 1.6				Page 32
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0aea  21 64 10      1861   1861       LD    HL,RNDNU         ;POINT NEW RND NUMBER
0aed  f7            1862   1862       RST   RST6             ;GO STORE IT
0aee  c9            1863   1863       RET                    ;RETURN
                    1864   1864 *HEADING IMSAI 8080 4K BASIC
0aef                1865   1865 EXPR  EQU   $
                    1866   1866 ;
                    1867   1867 ;
                    1868   1868 ;EVALUATE EXPRESSION ROUTINE
                    1869   1869 ;LEAVE RESULT IN FACC
                    1870   1870 ;RETURN WHEN EXPRESSION ENDS (TYPICALLY AT END OF LINE)
                    1871   1871 ;
                    1872   1872 ;
0aef  af            1873   1873       XOR   A                ;CLEAR REG A
0af0  32 54 10      1874   1874       LD    (PARCT),A        ;SET PAREN CTR
0af3  32 55 10      1875   1875       LD    (SPCTR),A        ;SET STACK CTR
0af6  eb            1876   1876       EX    DE,HL            ;SAVE HL IN DE
0af7  2a 1a 11      1877   1877       LD    HL,(PROGE)       ;POINT END OF PROGRAM AREA
0afa  22 52 10      1878   1878       LD    (EXPRS),HL       ;SAVE IT
0afd  eb            1879   1879       EX    DE,HL            ;RESTORE HL
                    1880   1880 ;
0afe                1881   1881 LOOKD EQU   $                ;LOOK FOR CONSTANT, VARIABLE, OR
0afe  cd ee 0e      1882   1882       CALL  NUMER            ;GO TEST IF NUMERIC
0b01  c2 17 0b      1883   1883       JP    NZ,LDALP         ;BRIF NOT
0b04  cd 44 05      1884   1884 LDNUM CALL  FIN              ;GO CONVERT NUMERIC (PUT TO FACC
0b07  44            1885   1885 LDF   LD    B,H              ;COPY HL TO BC
0b08  4d            1886   1886       LD    C,L              ;SAME
0b09  2a 52 10      1887   1887       LD    HL,(EXPRS)       ;GET ADDR OF EXPR AREA
0b0c  cd c5 0e      1888   1888       CALL  GTEMP            ;GO STORE THE FACC IN TEMP AREA
0b0f  22 52 10      1889   1889       LD    (EXPRS),HL       ;SAVE UPDATED ADDRESS
0b12  60            1890   1890       LD    H,B              ;RESTORE H
0b13  69            1891   1891       LD    L,C              ;RESTORE L
0b14  c3 d2 0b      1892   1892       JP    LOOKO            ;GO GET AN OPERATION CODE
0b17  fe 2e         1893   1893 LDALP CP    '.'              ;SEE IF LEADING DECIMAL POINT
0b19  ca 04 0b      1894   1894       JP    Z,LDNUM          ;BRIF IS
0b1c  cd e5 0e      1895   1895       CALL  ALPHA            ;GO SEE IF ALPHA
0b1f  c2 aa 0b      1896   1896       JP    NZ,LDDTN         ;BRIF NOT
0b22  46            1897   1897       LD    B,(HL)           ;SAVE 1ST CHAR
0b23  23            1898   1898       INC   HL               ;POINT NEXT
0b24  0e 20         1899   1899       LD    C,' '            ;DEFAULT FOR 1 CHAR VAR
0b26  cd ee 0e      1900   1900       CALL  NUMER            ;GO SEE IF 2ND IS NUMERIC
0b29  c2 41 0b      1901   1901       JP    NZ,LDFN          ;BRIF NOT
0b2c  23            1902   1902       INC   HL               ;POINT NEXT
0b2d  4f            1903   1903       LD    C,A              ;SAVE THE CHAR
0b2e  e5            1904   1904 LDVR1 PUSH  HL               ;SAVE HL
0b2f  50            1905   1905       LD    D,B              ;COPY BC
0b30  59            1906   1906       LD    E,C              ;TO DE
0b31  cd fe 0e      1907   1907       CALL  SEARC            ;GO GET VAR ADDR IN DE
0b34  2a 52 10      1908   1908       LD    HL,(EXPRS)       ;GET EXPR ADDR
0b37  cd dd 0e      1909   1909       CALL  SADR             ;GO STORE ADDRESS
0b3a  22 52 10      1910   1910       LD    (EXPRS),HL       ;SAVE ADDRESS
0b3d  e1            1911   1911       POP   HL               ;RESTORE HL
0b3e  c3 d2 0b      1912   1912       JP    LOOKO            ;GO LOOK FOR OPCODE
0b41  cd e5 0e      1913   1913 LDFN  CALL  ALPHA            ;GO SEE IF FUNCTION
0b44  c2 2e 0b      1914   1914       JP    NZ,LDVR1         ;BRIF IT'S NOT
0b47  2b            1915   1915 LDFN1 DEC   HL               ;POINT BACK TO 1ST
0b48  7e            1916   1916       LD    A,(HL)           ;GET THAT CHAR
0b49  fe 20         1917   1917       CP    ' '              ;TEST IF SPACE
0b4b  ca 47 0b      1918   1918       JP    Z,LDFN1          ;LOOP IF IS
0b4e  e5            1919   1919       PUSH  HL               ;SAVE HL
0b4f  11 6c 0f      1920   1920       LD    DE,RNDLI         ;POINT LITERAL
Z80-Assembler		Release 1.6				Page 33
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0b52  d7            1921   1921       RST   RST2             ;GO COMPARE
0b53  ca 8e 0b      1922   1922       JP    Z,LDRND          ;BRIF RND
0b56  e1            1923   1923       POP   HL               ;GET HL
0b57  e5            1924   1924       PUSH  HL               ;RESAVE IT
0b58  11 74 0f      1925   1925       LD    DE,SQRLI         ;POINT LITERAL
0b5b  d7            1926   1926       RST   RST2             ;GO COMPARE
0b5c  01 47 0a      1927   1927       LD    BC,SQR           ;GET ADDR OF ROUTINE
0b5f  ca 97 0b      1928   1928       JP    Z,LDFNC          ;BRIF IS
0b62  e1            1929   1929       POP   HL               ;GET HL
0b63  e5            1930   1930       PUSH  HL               ;RESAVE
0b64  11 b4 0f      1931   1931       LD    DE,INTLI         ;POINT
0b67  d7            1932   1932       RST   RST2             ;GO COMPARE
0b68  01 1d 0a      1933   1933       LD    BC,INT           ;ROUTINE ADDR
0b6b  ca 97 0b      1934   1934       JP    Z,LDFNC          ;BRIF EQUAL
0b6e  e1            1935   1935       POP   HL               ;GET HL
0b6f  e5            1936   1936       PUSH  HL               ;SAVE IT
0b70  11 70 0f      1937   1937       LD    DE,ABSLI         ;LITERAL
0b73  d7            1938   1938       RST   RST2             ;COMPARE
0b74  01 04 0a      1939   1939       LD    BC,ABS           ;ROUTINE
0b77  ca 97 0b      1940   1940       JP    Z,LDFNC          ;BRIF EQUAL
0b7a  e1            1941   1941       POP   HL               ;GET HL
0b7b  e5            1942   1942       PUSH  HL               ;SAVE IT
0b7c  11 78 0f      1943   1943       LD    DE,SGNLI         ;LITERAL
0b7f  d7            1944   1944       RST   RST2             ;GO COMPARE
0b80  01 0d 0a      1945   1945       LD    BC,SGN           ;ROUTINE
0b83  ca 97 0b      1946   1946       JP    Z,LDFNC          ;BRIF EQUAL
0b86  e1            1947   1947       POP   HL               ;GET HL
0b87  46            1948   1948       LD    B,(HL)           ;GET 1ST CHAR
0b88  0e 20         1949   1949       LD    C,' '            ;SPACE 2ND CHAR
0b8a  23            1950   1950       INC   HL               ;POINT NEXT
0b8b  c3 2e 0b      1951   1951       JP    LDVR1            ;BRIF VARIABLE
0b8e  e5            1952   1952 LDRND PUSH  HL               ;SAVE HL
0b8f  cd d1 0a      1953   1953       CALL  RND              ;GO GET RANDOM NUMBER
0b92  e1            1954   1954       POP   HL               ;RESTORE HL
0b93  d1            1955   1955       POP   DE               ;RESTORE STACK POINTER
0b94  c3 07 0b      1956   1956       JP    LDF              ;ACT AS IF CONSTANT
0b97  d1            1957   1957 LDFNC POP   DE               ;POP THE STACK
0b98  eb            1958   1958       EX    DE,HL            ;FLIP/FLOP
0b99  2a 52 10      1959   1959       LD    HL,(EXPRS)       ;GET ADDR
0b9c  23            1960   1960       INC   HL               ;POINT NEXT
0b9d  70            1961   1961       LD    (HL),B           ;HIGH ADDR
0b9e  23            1962   1962       INC   HL               ;POINT NEXT
0b9f  71            1963   1963       LD    (HL),C           ;LOW ADDR
0ba0  23            1964   1964       INC   HL               ;POINT NEXT
0ba1  36 01         1965   1965       LD    (HL),1           ;CODE
0ba3  22 52 10      1966   1966       LD    (EXPRS),HL       ;SAVE ADDR
0ba6  eb            1967   1967       EX    DE,HL            ;RESTORE HL
0ba7  c3 fe 0a      1968   1968       JP    LOOKD            ;NEXT MUST BE DATA TOO
0baa  fe 2d         1969   1969 LDDTN CP    '-'              ;TEST IF UNARY MINUS
0bac  c2 b7 0b      1970   1970       JP    NZ,LDDTP         ;BRIF NOT
0baf  01 c7 0a      1971   1971       LD    BC,NEG           ;SET UP CALL
0bb2  23            1972   1972       INC   HL               ;POINT NEXT
0bb3  e5            1973   1973       PUSH  HL               ;SAVE HL
0bb4  c3 97 0b      1974   1974       JP    LDFNC            ;GO AS IF FUNCTION
0bb7  fe 28         1975   1975 LDDTP CP    '('              ;TEST IF OPEN PAREN
0bb9  c2 7a 0e      1976   1976       JP    NZ,SNERR         ;BRIF NOT CONSTANT, FUNCTION, OR
0bbc  3a 54 10      1977   1977       LD    A,(PARCT)        ;GET OPEN COUNT
0bbf  3c            1978   1978       INC   A                ;ADD ONE
0bc0  32 54 10      1979   1979       LD    (PARCT),A        ;STORE IT
0bc3  eb            1980   1980       EX    DE,HL            ;SAVE HL
Z80-Assembler		Release 1.6				Page 34
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0bc4  2a 52 10      1981   1981       LD    HL,(EXPRS)       ;GET ADDR
0bc7  23            1982   1982       INC   HL               ;POINT NEXT
0bc8  36 28         1983   1983       LD    (HL),'('         ;PUT CODE
0bca  22 52 10      1984   1984       LD    (EXPRS),HL       ;SAVE ADDR
0bcd  eb            1985   1985       EX    DE,HL            ;RESTORE HL
0bce  23            1986   1986       INC   HL               ;POINT NEXT
0bcf  c3 fe 0a      1987   1987       JP    LOOKD            ;NEXT HAS TO BE DATA TOO
0bd2  cf            1988   1988 LOOKO RST   RST1             ;SKIP BLANKS
0bd3  fe 2b         1989   1989       CP    '+'              ;TEST IF PLUS
0bd5  ca f9 0b      1990   1990       JP    Z,OP1            ;BRIF IS
0bd8  fe 2d         1991   1991       CP    '-'              ;TEST IF MINUS
0bda  ca f9 0b      1992   1992       JP    Z,OP1            ;BRIF IS
0bdd  fe 2a         1993   1993       CP    '*'              ;TEST IF MULTIPLY
0bdf  ca 2c 0c      1994   1994       JP    Z,OP2            ;BRIF IS
0be2  fe 2f         1995   1995       CP    '/'              ;TEST IF DIVIDE
0be4  ca 2c 0c      1996   1996       JP    Z,OP2            ;BRIF IS
0be7  fe 29         1997   1997       CP    ')'              ;TEST IF CLOSE PAREN
0be9  ca 41 0c      1998   1998       JP    Z,OP3            ;BRIF IS
                    1999   1999 ;ELSE MUST BE END OF EXPRESSION
0bec  3a 54 10      2000   2000       LD    A,(PARCT)        ;GET OPEN PAREN COUNT
0bef  b7            2001   2001       OR    A                ;TEST IT
0bf0  c2 7a 0e      2002   2002       JP    NZ,SNERR         ;BRIF # OF ('S NOT = # OF )'S
0bf3  22 5b 10      2003   2003       LD    (ADDR3),HL       ;SAVE ADDR OF STMT
0bf6  c3 4f 0c      2004   2004       JP    EVAL             ;GO EVALUATE
0bf9  e5            2005   2005 OP1   PUSH  HL               ;SAVE HL
0bfa  4e            2006   2006       LD    C,(HL)           ;SAVE OPERATION
0bfb  06 00         2007   2007       LD    B,0              ;INIT CTR
0bfd  2a 52 10      2008   2008       LD    HL,(EXPRS)       ;GET END POINTER
0c00  04            2009   2009 OP1L1 INC   B                ;COUNT ONE MORE
0c01  7e            2010   2010       LD    A,(HL)           ;LOAD TYPE CODE
0c02  fe 28         2011   2011       CP    '('              ;TEST IF OPEN PAREN
0c04  ca 1c 0c      2012   2012       JP    Z,INSOP          ;BRIF IS
0c07  b7            2013   2013       OR    A                ;TEST IF END BUFF
0c08  ca 1c 0c      2014   2014       JP    Z,INSOP          ;BRIF IS
0c0b  b7            2015   2015       OR    A                ;TEST IF DATA
0c0c  ca 14 0c      2016   2016       JP    Z,OP1L2          ;BRIF IS
0c0f  fe 01         2017   2017       CP    1                ;TEST IF FUNCT
0c11  c2 18 0c      2018   2018       JP    NZ,OP1L3         ;BRIF NOT EQUAL
0c14  2b            2019   2019 OP1L2 DEC   HL               ;POINT NEXT
0c15  2b            2020   2020       DEC   HL               ;DITTO
0c16  04            2021   2021       INC   B                ;COUNT
0c17  04            2022   2022       INC   B                ;TWO BYTES
0c18  2b            2023   2023 OP1L3 DEC   HL               ;POINT NEXT OPCODE
0c19  c3 00 0c      2024   2024       JP    OP1L1            ;LOOP
0c1c  23            2025   2025 INSOP INC   HL               ;POINT FIRST CHAR
0c1d  7e            2026   2026       LD    A,(HL)           ;PICK UP OLD VALUE
0c1e  71            2027   2027       LD    (HL),C           ;PUT PREV
0c1f  4f            2028   2028       LD    C,A              ;ROTATE
0c20  05            2029   2029       DEC   B                ;DECR COUNT
0c21  c2 1c 0c      2030   2030       JP    NZ,INSOP         ;LOOP
0c24  22 52 10      2031   2031       LD    (EXPRS),HL       ;SAVE ADDR
0c27  e1            2032   2032       POP   HL               ;GET STMT POINTER
0c28  23            2033   2033       INC   HL               ;POINT NEXT
0c29  c3 fe 0a      2034   2034       JP    LOOKD            ;NEXT IS DATA
0c2c  e5            2035   2035 OP2   PUSH  HL               ;SAV HL
0c2d  4e            2036   2036       LD    C,(HL)           ;SAVE OPCODE
0c2e  06 01         2037   2037       LD    B,1              ;INIT CTR
0c30  2a 52 10      2038   2038       LD    HL,(EXPRS)       ;GET CURRENT END
0c33  ff            2039   2039 OP2A  RST   RST7             ;GO BUMP HL
0c34  fd            2040   2040       DEFB  -3               ;BY NEG THREE
Z80-Assembler		Release 1.6				Page 35
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0c35  04            2041   2041       INC   B                ;ADD
0c36  04            2042   2042       INC   B                ;THREE
0c37  04            2043   2043       INC   B                ;TO B
0c38  7e            2044   2044       LD    A,(HL)           ;GET TYPE CODE
0c39  fe 01         2045   2045       CP    1                ;SEE IF FUNCTION
0c3b  ca 33 0c      2046   2046       JP    Z,OP2A           ;BRIF IS
0c3e  c3 1c 0c      2047   2047       JP    INSOP            ;GO INSERT OPCODE
0c41  3a 54 10      2048   2048 OP3   LD    A,(PARCT)        ;GET OPEN PAREN COUNT
0c44  3d            2049   2049       DEC   A                ;SUBTRACT ONE
0c45  32 54 10      2050   2050       LD    (PARCT),A        ;SAVE IT
0c48  fa 7a 0e      2051   2051       JP    M,SNERR          ;BRIF TOO MANY )'S
0c4b  23            2052   2052       INC   HL               ;POINT NEXT SOURCE
0c4c  22 5b 10      2053   2053       LD    (ADDR3),HL       ;SAVE ADDR
0c4f  2a 52 10      2054   2054 EVAL  LD    HL,(EXPRS)       ;GET END OF EXPR
0c52  01 00 00      2055   2055 EV0   LD    BC,0             ;INIT BC TO ZERO
0c55  04            2056   2056 EV1   INC   B                ;COUNT EACH BYTE
0c56  7e            2057   2057       LD    A,(HL)           ;GET CODE IN REG A
0c57  2b            2058   2058       DEC   HL               ;POINT NEXT
0c58  fe e3         2059   2059       CP    0E3H             ;TEST IT
0c5a  c2 65 0c      2060   2060       JP    NZ,EV2           ;BRIF NOT DATA
0c5d  2b            2061   2061       DEC   HL               ;POINT NEXT
0c5e  2b            2062   2062       DEC   HL               ;DITTO
0c5f  04            2063   2063       INC   B                ;BUMP CTR
0c60  04            2064   2064       INC   B                ;BY TWO
0c61  0c            2065   2065       INC   C                ;COUNT THE TERM
0c62  c3 55 0c      2066   2066       JP    EV1              ;LOOP
0c65  fe 01         2067   2067 EV2   CP    1                ;TEST IF FUNCTION
0c67  c2 b0 0c      2068   2068       JP    NZ,EV5           ;BRIF NOT
0c6a  23            2069   2069       INC   HL               ;RESET TO TYPE CODE
0c6b  23            2070   2070       INC   HL               ;POINT BACK PREV DATA
0c6c  56            2071   2071       LD    D,(HL)           ;MOVE HIGH TO D
0c6d  23            2072   2072       INC   HL               ;POINT ONE MORE
0c6e  5e            2073   2073       LD    E,(HL)           ;MOV LOW
0c6f  c5            2074   2074       PUSH  BC               ;SAVE CTRS
0c70  e5            2075   2075       PUSH  HL               ;SAVE LOCATION
0c71  eb            2076   2076       EX    DE,HL            ;FLIP/FLOP
0c72  ef            2077   2077       RST   RST5             ;GO LOAD THE VARIABLE
0c73  e1            2078   2078       POP   HL               ;RESTORE LOCATION
0c74  ff            2079   2079       RST   RST7             ;GO BUMP HL
0c75  fd            2080   2080       DEFB  -3
0c76  5e            2081   2081       LD    E,(HL)           ;LOW BYTE
0c77  2b            2082   2082       DEC   HL               ;POINT BACK
0c78  56            2083   2083       LD    D,(HL)           ;HIGH BYTE
0c79  e5            2084   2084       PUSH  HL               ;SAVE LOCATION
0c7a  21 80 0c      2085   2085       LD    HL,EV3           ;GET RETURN ADDRESS
0c7d  e5            2086   2086       PUSH  HL               ;SAVE ON STACK
0c7e  eb            2087   2087       EX    DE,HL            ;PUT TO HL
0c7f  e9            2088   2088       JP    (HL)             ;GO EXECUTE THE FUNCTION
0c80                2089   2089 EV3   EQU   $                ;FUNCTIONS RETURN HERE
0c80  d1            2090   2090       POP   DE               ;GET LOCATION
0c81  c1            2091   2091       POP   BC               ;GET COUNTERS
0c82  21 00 00      2092   2092       LD    HL,0             ;LOAD ZERO TO HL
0c85  e5            2093   2093       PUSH  HL               ;GET BLOCK OF
0c86  e5            2094   2094       PUSH  HL               ;4 BYTES
0c87  3a 55 10      2095   2095       LD    A,(SPCTR)        ;GET TEMP CTR
0c8a  3c            2096   2096       INC   A                ;COUNT ONE
0c8b  32 55 10      2097   2097       LD    (SPCTR),A        ;SAVE IT
0c8e  39            2098   2098       ADD   HL,SP            ;GET STACK ADDR
0c8f  c5            2099   2099       PUSH  BC               ;SAVE CTRS
0c90  d5            2100   2100       PUSH  DE               ;SAVE LOCATION
Z80-Assembler		Release 1.6				Page 36
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0c91  e5            2101   2101       PUSH  HL               ;SAVE ADDR
0c92  f7            2102   2102       RST   RST6             ;GO STORE THE VARIABLE
0c93  d1            2103   2103       POP   DE               ;RESTORE ADDR
0c94  e1            2104   2104       POP   HL               ;RESTORE LOCATION
0c95  c1            2105   2105       POP   BC               ;RESTORE COUNTERS
0c96  72            2106   2106       LD    (HL),D           ;PUT HIGH ADDR BYTE
0c97  23            2107   2107       INC   HL               ;POINT NEXT
0c98  73            2108   2108       LD    (HL),E           ;PUT LOW ADDR BYTE
0c99  23            2109   2109       INC   HL               ;POINT NEXT
0c9a  36 e3         2110   2110       LD    (HL),0E3H        ;SET CODE = DATA
0c9c  54            2111   2111       LD    D,H              ;COPY
0c9d  5d            2112   2112       LD    E,L              ;HL TO DE
0c9e  05            2113   2113       DEC   B                ;SUB 1 FROM BYTE COUNT
0c9f  13            2114   2114       INC   DE               ;POINT
0ca0  13            2115   2115       INC   DE               ;TO
0ca1  13            2116   2116       INC   DE               ;CORRECT
0ca2  cd bc 0e      2117   2117       CALL  SQUIS            ;GO COMPRESS STACK
0ca5  2a 52 10      2118   2118       LD    HL,(EXPRS)       ;GET ADDR
0ca8  ff            2119   2119       RST   RST7             ;GO DECR HL
0ca9  fd            2120   2120       DEFB  -3               ;BY THREE
0caa  22 52 10      2121   2121       LD    (EXPRS),HL       ;SAVE UPDATED ADDR
0cad  c3 4f 0c      2122   2122       JP    EVAL             ;START AT BEGINNING
0cb0  fe 28         2123   2123 EV5   CP    '('              ;TEST IF OPEN PAREN
0cb2  c2 cf 0c      2124   2124       JP    NZ,EV6           ;BRIF NOT
0cb5  79            2125   2125       LD    A,C              ;GET TERM CT
0cb6  fe 01         2126   2126       CP    1                ;TEST IF ONE
0cb8  c2 76 0e      2127   2127       JP    NZ,STERR         ;ERROR IF ONE TERM NOT REMAIN
0cbb  54            2128   2128       LD    D,H              ;COPY HL
0cbc  5d            2129   2129       LD    E,L              ;TO DE
0cbd  13            2130   2130       INC   DE               ;POINT SENDING
0cbe  05            2131   2131       DEC   B                ;SUBT ONE FROM COUNT
0cbf  cd bc 0e      2132   2132       CALL  SQUIS            ;GO COMPRESS IT
0cc2  2a 52 10      2133   2133       LD    HL,(EXPRS)       ;GET POINTER
0cc5  2b            2134   2134       DEC   HL               ;LESS ONE
0cc6  22 52 10      2135   2135       LD    (EXPRS),HL       ;UPDATE IT
0cc9  2a 5b 10      2136   2136       LD    HL,(ADDR3)       ;RESTORE STMT POINTERS
0ccc  c3 d2 0b      2137   2137       JP    LOOKO            ;CONTINUE
0ccf  b7            2138   2138 EV6   OR    A                ;TEST IF END OF EXPRESSION
0cd0  c2 ef 0c      2139   2139       JP    NZ,EV9           ;BRIF NOT
0cd3  79            2140   2140       LD    A,C              ;GET TERM COUNT
0cd4  fe 01         2141   2141       CP    1                ;TEST IF ONE
0cd6  c2 76 0e      2142   2142       JP    NZ,STERR         ;ERROR IF NOT ONE
0cd9  23            2143   2143       INC   HL               ;POINT HIGH ADDR
0cda  23            2144   2144       INC   HL               ;SAME
0cdb  56            2145   2145       LD    D,(HL)           ;HIGH TO D
0cdc  23            2146   2146       INC   HL               ;POINT LOW
0cdd  5e            2147   2147       LD    E,(HL)           ;LOW TO E
0cde  eb            2148   2148       EX    DE,HL            ;PUT DATA ADDRESS IN HL
0cdf  ef            2149   2149       RST   RST5             ;GO LOAD IT
0ce0  2a 5b 10      2150   2150       LD    HL,(ADDR3)       ;RESTORE STMT POINTER
0ce3  3a 55 10      2151   2151       LD    A,(SPCTR)        ;GET STACK WORD (4BYTE) COUNTER
0ce6  b7            2152   2152       OR    A                ;TEST IT
0ce7  c8            2153   2153       RET   Z                ;RETURN IF ZERO
0ce8  d1            2154   2154 EV7   POP   DE               ;RETURN 2 BYTES
0ce9  d1            2155   2155       POP   DE               ;RETURN 2 MORE
0cea  3d            2156   2156       DEC   A                ;DECR CTR
0ceb  c2 e8 0c      2157   2157       JP    NZ,EV7           ;LOOP
0cee  c9            2158   2158       RET                    ;RETURN TO STMT PROCESSOR
0cef  fe 2b         2159   2159 EV9   CP    '+'              ;TEST IF PLUS
0cf1  11 21 0d      2160   2160       LD    DE,FADDJ         ;ADDR
Z80-Assembler		Release 1.6				Page 37
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0cf4  ca 0f 0d      2161   2161       JP    Z,EV10           ;BRIF IS
0cf7  fe 2d         2162   2162       CP    '-'              ;TEST IF MINUS
0cf9  11 28 0d      2163   2163       LD    DE,FSUBJ         ;ADDR
0cfc  ca 0f 0d      2164   2164       JP    Z,EV10           ;BRIF IS
0cff  fe 2a         2165   2165       CP    '*'              ;TEST IF MUL
0d01  11 2f 0d      2166   2166       LD    DE,FMULJ         ;ADDR
0d04  ca 0f 0d      2167   2167       JP    Z,EV10           ;BRIF IS
0d07  fe 2f         2168   2168       CP    '/'              ;TEST IF DIV
0d09  11 36 0d      2169   2169       LD    DE,FDIVJ         ;ADDR
0d0c  c2 76 0e      2170   2170       JP    NZ,STERR         ;ERROR IF NOT
0d0f  23            2171   2171 EV10  INC   HL               ;POINT TO
0d10  23            2172   2172       INC   HL               ;1ST DATA
0d11  c5            2173   2173       PUSH  BC               ;SAVE CTRS
0d12  d5            2174   2174       PUSH  DE               ;SAVE ROUTINE ADDR
0d13  56            2175   2175       LD    D,(HL)           ;HIGH TO D
0d14  23            2176   2176       INC   HL               ;POINT NEXT
0d15  5e            2177   2177       LD    E,(HL)           ;LOW TO E
0d16  e5            2178   2178       PUSH  HL               ;SAVE POINTER
0d17  eb            2179   2179       EX    DE,HL            ;ADDR TO HL
0d18  ef            2180   2180       RST   RST5             ;GO LOAD IT
0d19  e1            2181   2181       POP   HL               ;RESTORE HL
0d1a  23            2182   2182       INC   HL               ;POINT 2ND DATA
0d1b  23            2183   2183       INC   HL               ;SAME
0d1c  56            2184   2184       LD    D,(HL)           ;HIGH TO D
0d1d  23            2185   2185       INC   HL               ;POINT NEXT
0d1e  5e            2186   2186       LD    E,(HL)           ;LOW TO E
0d1f  e3            2187   2187       EX    (SP),HL          ;POP ADDR FROM STACK, PUSH HL ON
0d20  e9            2188   2188       JP    (HL)             ;JUMP TO ROUTINE
0d21  eb            2189   2189 FADDJ EX    DE,HL            ;GET HL
0d22  cd d2 06      2190   2190       CALL  FADD             ;GO ADD
0d25  c3 3a 0d      2191   2191       JP    EV11             ;CONTINUE
0d28  eb            2192   2192 FSUBJ EX    DE,HL            ;GET HL
0d29  cd cb 07      2193   2193       CALL  FSUB             ;GO SUBTRACT
0d2c  c3 3a 0d      2194   2194       JP    EV11             ;CONTINUE
0d2f  eb            2195   2195 FMULJ EX    DE,HL            ;GET HL
0d30  cd e2 07      2196   2196       CALL  FMUL             ;GO MULTIPLY
0d33  c3 3a 0d      2197   2197       JP    EV11             ;CONTINUE
0d36  eb            2198   2198 FDIVJ EX    DE,HL            ;GET HL
0d37  cd d0 08      2199   2199       CALL  FDIV             ;GO DIVIDE
0d3a  e1            2200   2200 EV11  POP   HL               ;GET HL
0d3b  c1            2201   2201       POP   BC               ;GET CTRS
0d3c  ff            2202   2202       RST   RST7             ;GO DECR HL
0d3d  fa            2203   2203       DEFB  -6
0d3e  cd c5 0e      2204   2204       CALL  GTEMP            ;GO SAVE FACC
0d41  54            2205   2205       LD    D,H              ;COPY HL
0d42  5d            2206   2206       LD    E,L              ;TO DE
0d43  13            2207   2207       INC   DE               ;POSITION
0d44  13            2208   2208       INC   DE               ;TO
0d45  13            2209   2209       INC   DE               ;FOUR
0d46  13            2210   2210       INC   DE               ;BYTES OFFSET
0d47  78            2211   2211       LD    A,B              ;GET CTR
0d48  d6 03         2212   2212       SUB   3                ;MINUS THREE
0d4a  47            2213   2213       LD    B,A              ;SAVE
0d4b  cd bc 0e      2214   2214       CALL  SQUIS            ;GO COMPRESS
0d4e  2a 52 10      2215   2215       LD    HL,(EXPRS)       ;GET ADDR
0d51  ff            2216   2216       RST   RST7             ;GO DECR HL
0d52  fc            2217   2217       DEFB  -4               ;BY FOUR
0d53  22 52 10      2218   2218       LD    (EXPRS),HL       ;RESTORE
0d56  c3 4f 0c      2219   2219       JP    EVAL             ;CONTINUE
                    2220   2220 ;
Z80-Assembler		Release 1.6				Page 38
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                    2221   2221 ;
                    2222   2222 *HEADING IMSAI 8080 4K BASIC
0d59                2223   2223 TERMI EQU   $
                    2224   2224 ;
                    2225   2225 ;READ A LINE FROM THE TTY
                    2226   2226 ;FIRST PROMPT WITH THE CHAR IN THE A REG
                    2227   2227 ;TERMINATE THE LINE WITH A X'00'
                    2228   2228 ;IGNORE EMPTY LINES
                    2229   2229 ;CONTROL C WILL CANCEL THE LINE
                    2230   2230 ;RUBOUT WILL DELETE THE LAST CHAR INPUT
                    2231   2231 ;
                    2232   2232 ;
0d59  32 cf 10      2233   2233       LD    (PROMP),A        ;SAVE THE PROMPT CHAR
0d5c  3e ff         2234   2234       LD    A,0FFH           ;GET BEGIN MARKER
0d5e  32 01 10      2235   2235       LD    (IOBUF-1),A      ;PUT IT
0d61  21 02 10      2236   2236 REIN  LD    HL,IOBUF         ;POINT TO INPUT BUFFER
0d64  3a cf 10      2237   2237       LD    A,(PROMP)        ;GET THE PROMPT AGAIN
0d67  b7            2238   2238       OR    A                ;TEST IT
0d68  ca 73 0d      2239   2239       JP    Z,TREAD          ;BRIF NULL
0d6b  cd a5 0d      2240   2240       CALL  TESTO            ;GO WRITE IT
0d6e  3e 20         2241   2241       LD    A,' '            ;GET A SPACE
0d70  cd a5 0d      2242   2242       CALL  TESTO            ;WRITE SPACE
0d73                2243   2243 TREAD EQU   $
0d73  cd 9d 0d      2244   2244       CALL  TESTI            ;GO WAIT FOR READY
0d76  cd 33 0e      2245   2245       CALL  GETCH            ;GO GET THE CHARACTER
0d79  77            2246   2246       LD    (HL),A           ;PUT IN BUFFER
0d7a  7e            2247   2247       LD    A,(HL)           ;RELOAD THE CHAR
0d7b  fe 0a         2248   2248       CP    0AH              ;TEST IF LINE FEED
0d7d  ca 73 0d      2249   2249       JP    Z,TREAD          ;IGNORE IF IT IS
0d80  cd a5 0d      2250   2250       CALL  TESTO            ;ECHO THE CHARACTER
0d83  fe 0d         2251   2251       CP    0DH              ;TEST IF CR
0d85  c2 d6 0d      2252   2252       JP    NZ,NOTCR         ;BRIF NOT
0d88  cd ba 0d      2253   2253       CALL  CRLF             ;GO WRITE CRLF
0d8b  36 00         2254   2254 CR1   LD    (HL),0           ;MARK END WITH ALL HIGH
0d8d  2b            2255   2255       DEC   HL               ;POINT PRIOR
0d8e  7e            2256   2256       LD    A,(HL)           ;LOAD IT
0d8f  fe 20         2257   2257       CP    ' '              ;TEST IF SPACE
0d91  ca 8b 0d      2258   2258       JP    Z,CR1            ;BRIF SPACE
0d94  fe ff         2259   2259       CP    0FFH             ;TEST IF AT BEGINNING
0d96  ca 61 0d      2260   2260       JP    Z,REIN           ;BRIF IS (NULL LINE)
0d99  21 02 10      2261   2261       LD    HL,IOBUF         ;POINT TO START
0d9c  c9            2262   2262       RET                    ;ELSE, RETURN
0d9d                2263   2263 TESTI EQU   $
0d9d  db 03         2264   2264       IN    A,(TTY+1)        ;GET TERM STATUS
0d9f  e6 02         2265   2265       AND   2                ;MASK FOR RXRDY
0da1  ca 9d 0d      2266   2266       JP    Z,TESTI          ;LOOP TILL READY
0da4  c9            2267   2267       RET                    ;RETURN
0da5                2268   2268 TESTO EQU   $
0da5  f5            2269   2269       PUSH  AF               ;SAVE CHAR TO OUTPUT
0da6  3a 61 10      2270   2270       LD    A,(OUTSW)        ;GET OUTPUT SWITCH
0da9  b7            2271   2271       OR    A                ;TEST IF OFF
0daa  c2 b8 0d      2272   2272       JP    NZ,TOUT2         ;BRIF NOT
0dad  db 03         2273   2273 TOUT1 IN    A,(TTY+1)        ;GET STATUS
0daf  e6 01         2274   2274       AND   1                ;TEST TXRDY
0db1  ca ad 0d      2275   2275       JP    Z,TOUT1          ;LOOP TILL READY
0db4  f1            2276   2276       POP   AF               ;GET CHAR TO OUTPUT
0db5  d3 02         2277   2277       OUT   (TTY),A          ;WRITE IT
0db7  c9            2278   2278       RET                    ;RETURN
0db8  f1            2279   2279 TOUT2 POP   AF               ;RESTORE CHAR
0db9  c9            2280   2280       RET                    ;RETURN
Z80-Assembler		Release 1.6				Page 39
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0dba  af            2281   2281 CRLF  XOR   A                ;CLEAR REG A
0dbb  32 63 10      2282   2282       LD    (COLUM),A        ;RESET COLUM POINTER
0dbe  3e 0d         2283   2283       LD    A,0DH            ;GET CR
0dc0  cd a5 0d      2284   2284       CALL  TESTO            ;WRITE IT
0dc3  3e 0a         2285   2285       LD    A,0AH            ;LF
0dc5  cd a5 0d      2286   2286       CALL  TESTO            ;WRITE IT
0dc8  c5            2287   2287       PUSH  BC               ;SAVE BC
0dc9  06 02         2288   2288       LD    B,2              ;DELAY COUNT
0dcb  3e ff         2289   2289 DELAY LD    A,0FFH           ;GET RUBOUT
0dcd  cd a5 0d      2290   2290       CALL  TESTO            ;WRITE IT
0dd0  05            2291   2291       DEC   B                ;DECR LOOP CTR
0dd1  c2 cb 0d      2292   2292       JP    NZ,DELAY         ;LOOP
0dd4  c1            2293   2293       POP   BC               ;RESTORE BC
0dd5  c9            2294   2294       RET                    ;RETURN
0dd6  fe 7f         2295   2295 NOTCR CP    7FH              ;TEST IF RUBOUT
0dd8  c2 f1 0d      2296   2296       JP    NZ,NOTBS         ;BRIF NOT
0ddb  2b            2297   2297       DEC   HL               ;POINT PRIOR
0ddc  7e            2298   2298       LD    A,(HL)           ;LOAD PREV CHAR
0ddd  fe ff         2299   2299       CP    0FFH             ;TEST IF AT BEGIN
0ddf  ca f1 0d      2300   2300       JP    Z,NOTBS          ;BRIF IS
0de2  3e 3a         2301   2301       LD    A,':'            ;BACKSLASH
0de4  cd a5 0d      2302   2302       CALL  TESTO            ;WRITE IT
0de7  7e            2303   2303       LD    A,(HL)           ;LOAD THE CHAR
0de8  cd a5 0d      2304   2304       CALL  TESTO            ;WRITE IT
0deb  2b            2305   2305       DEC   HL               ;POINT PRIOR
0dec  3e 3a         2306   2306       LD    A,':'            ;BACKSLASH
0dee  cd a5 0d      2307   2307       CALL  TESTO            ;WRITE IT
0df1  23            2308   2308 NOTBS INC   HL               ;POINT NEXT BUFFER POSIT
0df2  c3 73 0d      2309   2309       JP    TREAD            ;LOOP FOR NEXT
                    2310   2310 ;
                    2311   2311 ;
0df5                2312   2312 TERMO EQU   $
                    2313   2313 ;
                    2314   2314 ;TTY PRINT ROUTINE
                    2315   2315 ;
                    2316   2316 ;OUTPUT STRING OF CHARS STARTING AT IOBUFF THRU END (00 OR
                    2317   2317 ;FOLLOWING IMBEDDED CHARACTERS ARE INTERPRETED AS CONTROLS:
                    2318   2318 ;X'00' END OF BUFFER, TYPE CR/LF AND RETURN
                    2319   2319 ;X'FE' END OF BUFFER, RETURN (NO CR/LF)
                    2320   2320 ;X'FD' TYPE CR/LF, CONTINUE
                    2321   2321 ;
                    2322   2322 ;
0df5  21 02 10      2323   2323       LD    HL,IOBUF         ;GET ADDR OF BUFFER
0df8  7e            2324   2324 OUT1  LD    A,(HL)           ;LOAD A BYTE
0df9  fe fe         2325   2325       CP    0FEH             ;SEE IF END OF LINE (NO CR/LF)
0dfb  c8            2326   2326       RET   Z                ;RETURN IF EQUAL
0dfc  fe fd         2327   2327       CP    0FDH             ;SEE IF EMBEDDED CR/LF
0dfe  c2 07 0e      2328   2328       JP    NZ,OUT2          ;BRIF NOT
0e01  cd ba 0d      2329   2329       CALL  CRLF             ;LINE FEED
0e04  c3 16 0e      2330   2330       JP    OUT4             ;CONTINUE
0e07  b7            2331   2331 OUT2  OR    A                ;TEST IF END OF OUTPUT
0e08  ca ba 0d      2332   2332       JP    Z,CRLF           ;BRIF IS
0e0b  7e            2333   2333       LD    A,(HL)           ;LOAD THE BYTE
0e0c  cd a5 0d      2334   2334       CALL  TESTO            ;TYPE IT
0e0f  3a 63 10      2335   2335       LD    A,(COLUM)        ;GET COLUM POINTER
0e12  3c            2336   2336       INC   A                ;ADD ONE
0e13  32 63 10      2337   2337       LD    (COLUM),A        ;RESTORE IT
0e16  23            2338   2338 OUT4  INC   HL               ;POINT NEXT
0e17  c3 f8 0d      2339   2339       JP    OUT1             ;LOOP
                    2340   2340 ;
Z80-Assembler		Release 1.6				Page 40
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                    2341   2341 ;
                    2342   2342 ;
0e1a                2343   2343 LINEO EQU   $
                    2344   2344 ;
                    2345   2345 ;UNPACK LINE NUMBER FROM (HL) TO (DE)
                    2346   2346 ;
                    2347   2347 ;
0e1a  cd 1d 0e      2348   2348       CALL  LOUT             ;GO FORMAT 2 BYTES
0e1d                2349   2349 LOUT  EQU   $
0e1d  7e            2350   2350       LD    A,(HL)           ;GET BYTE
0e1e  cd f7 0e      2351   2351       CALL  RIGHT            ;GO SHIFT TO RIGHT
0e21  f6 30         2352   2352       OR    30H              ;ZONE
0e23  12            2353   2353       LD    (DE),A           ;PUT TO BUFFER
0e24  13            2354   2354       INC   DE               ;POINT NEXT
0e25  7e            2355   2355       LD    A,(HL)           ;LOAD BYTE
0e26  e6 0f         2356   2356       AND   0FH              ;MASK
0e28  f6 30         2357   2357       OR    30H              ;ZONE
0e2a  12            2358   2358       LD    (DE),A           ;PUT TO BUFFER
0e2b  13            2359   2359       INC   DE               ;POINT NEXT
0e2c  23            2360   2360       INC   HL               ;AND NEXT LINE BYTE
0e2d  c9            2361   2361       RET                    ;RETURN
                    2362   2362 ;
                    2363   2363 ;
0e2e                2364   2364 TSTCH EQU   $
                    2365   2365 ;
                    2366   2366 ;TEST IF INPUT CHAR ON KEYBOARD
                    2367   2367 ;IF THERE IS, THEN READ IT
                    2368   2368 ;TERMINATE IF CONTROL-C
                    2369   2369 ;TOGGLE OUTPUT SW IF CONTROL-O
                    2370   2370 ;
0e2e  db 03         2371   2371       IN    A,(TTY+1)        ;GET STATUS
0e30  e6 02         2372   2372       AND   2                ;MASK FOR RXRDY
0e32  c8            2373   2373       RET   Z                ;RETURN IF NOT
0e33  db 02         2374   2374 GETCH IN    A,(TTY)          ;ELSE, READ THE CHAR
0e35  e6 7f         2375   2375       AND   7FH              ;TURN OFF PARITY
0e37  fe 0f         2376   2376       CP    0FH              ;TEST IF CONTROL-O
0e39  ca 45 0e      2377   2377       JP    Z,CONTO          ;BRIF IS
0e3c  fe 03         2378   2378       CP    03H              ;TEST IF CONTROL-C
0e3e  c0            2379   2379       RET   NZ               ;RETURN IF NOT
0e3f  cd ba 0d      2380   2380       CALL  CRLF             ;PRINT CR/LF
0e42  c3 8d 00      2381   2381       JP    READY            ;QUIT WHAT YOU WERE DOING
0e45  3a 61 10      2382   2382 CONTO LD    A,(OUTSW)        ;GET SWITCH
0e48  ee 01         2383   2383       XOR   01H              ;TOGGLE
0e4a  32 61 10      2384   2384       LD    (OUTSW),A        ;RESTORE
0e4d  3e 0a         2385   2385       LD    A,0AH            ;GET A LF
0e4f  c9            2386   2386       RET                    ;RETURN
                    2387   2387 ;
                    2388   2388 ;
0e50                2389   2389 ZEROM EQU   $
                    2390   2390 ;
                    2391   2391 ;MOVE STRING OF ZEROS TO (HL)+...  CNT IN B
                    2392   2392 ;
0e50  36 00         2393   2393       LD    (HL),0           ;MOVE ONE ZERO
0e52  23            2394   2394       INC   HL               ;POINT NEXT
0e53  05            2395   2395       DEC   B                ;DECR CTR
0e54  c2 50 0e      2396   2396       JP    NZ,ZEROM         ;LOOP
0e57  c9            2397   2397       RET                    ;RETURN
                    2398   2398 ;
                    2399   2399 ;
0e58                2400   2400 COPYH EQU   $
Z80-Assembler		Release 1.6				Page 41
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                    2401   2401 ;
                    2402   2402 ;COPY STRING FROM (HL) TO (DE)
                    2403   2403 ;COUNT IN B
                    2404   2404 ;
0e58  7e            2405   2405       LD    A,(HL)           ;GET A CHAR
0e59  12            2406   2406       LD    (DE),A           ;PUT IT DOWN
0e5a  23            2407   2407       INC   HL               ;POINT NEXT
0e5b  13            2408   2408       INC   DE               ;DITTO
0e5c  05            2409   2409       DEC   B                ;DECR CTR
0e5d  c2 58 0e      2410   2410       JP    NZ,COPYH         ;LOOP
0e60  c9            2411   2411       RET                    ;RETURN
                    2412   2412 ;
                    2413   2413 ;
0e61                2414   2414 COPYD EQU   $
                    2415   2415 ;
                    2416   2416 ;COPY STRING FROM (DE) TO (HL)
                    2417   2417 ;COUNT IN B
                    2418   2418 ;
0e61  eb            2419   2419       EX    DE,HL            ;FLIP DE/HL
0e62  cd 58 0e      2420   2420       CALL  COPYH            ;GO COPY
0e65  eb            2421   2421       EX    DE,HL            ;THEN FLIP BACK
0e66  c9            2422   2422       RET                    ;RETURN
                    2423   2423 ;
                    2424   2424 ;
0e67                2425   2425 COMP2 EQU   $
                    2426   2426 ;
                    2427   2427 ;CONTINUE COMP SUBROUTINE (RST RST2)
                    2428   2428 ;
0e67  be            2429   2429       CP    (HL)             ;COMPARE THE CHAR
0e68  c0            2430   2430       RET   NZ               ;RETURN IF NOT EQUAL
0e69  13            2431   2431       INC   DE               ;POINT NEXT
0e6a  23            2432   2432       INC   HL               ;DITTO
0e6b  c3 10 00      2433   2433       JP    RST2             ;LOOP
                    2434   2434 ;
                    2435   2435 ;
0e6e  01 4c 55      2436   2436 ULERR LD    BC,'UL'          ;UNDEFINED LINE NUMBER
0e71  df            2437   2437       RST   RST3
0e72  01 56 4f      2438   2438 OVERR LD    BC,'OV'          ;DIV BY ZERO/OVERFLOW/UNDERFLOW
0e75  df            2439   2439       RST   RST3
0e76  01 54 53      2440   2440 STERR LD    BC,'ST'          ;ERROR IN EXPRESSION STACK
0e79  df            2441   2441       RST   RST3
0e7a  01 4e 53      2442   2442 SNERR LD    BC,'SN'          ;SYNTAX ERROR
0e7d  df            2443   2443       RST   RST3
0e7e  01 54 52      2444   2444 RTERR LD    BC,'RT'          ;RETURN & NO GOSUB
0e81  df            2445   2445       RST   RST3
0e82  01 41 44      2446   2446 DAERR LD    BC,'DA'          ;OUT OF DATA
0e85  df            2447   2447       RST   RST3
0e86  01 4f 46      2448   2448 FOERR LD    BC,'FO'          ;MORE THAN 8 NESTED FOR/NEXT OR
0e89  df            2449   2449       RST   RST3
0e8a  01 58 4e      2450   2450 NXERR LD    BC,'NX'          ;FOR & NO NEXT / NEXT & NO FOR
0e8d  df            2451   2451       RST   RST3
                    2452   2452 ;
                    2453   2453 ;
                    2454   2454 ;
                    2455   2455 ;
0e8e                2456   2456 PACK  EQU   $
                    2457   2457 ;
                    2458   2458 ;PACK LINE NUMBER FROM (HL) TO BC
                    2459   2459 ;
                    2460   2460 ;
Z80-Assembler		Release 1.6				Page 42
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0e8e  cf            2461   2461       RST   RST1             ;SKIP LEADING SPACES
0e8f  01 00 00      2462   2462       LD    BC,0             ;CLEAR B AND C
0e92  3e 04         2463   2463       LD    A,4              ;INIT DIGIT COUNTER
0e94  32 56 10      2464   2464       LD    (PRSW),A         ;SAVE A
0e97  7e            2465   2465 PK1   LD    A,(HL)           ;GET CHAR
0e98  cd ef 0e      2466   2466       CALL  NUMXR            ;TEST FOR NUMERIC
0e9b  c0            2467   2467       RET   NZ               ;RETURN IF NOT NUMERIC
0e9c  e6 0f         2468   2468       AND   0FH              ;STRIP OFF ZONE
0e9e  57            2469   2469       LD    D,A              ;SAVE IT
0e9f  3a 56 10      2470   2470       LD    A,(PRSW)         ;GET COUNT
0ea2  3d            2471   2471       DEC   A                ;SUBTRACT ONE
0ea3  fa 7a 0e      2472   2472       JP    M,SNERR          ;BRIF MORE THAN 4 DIGITS
0ea6  32 56 10      2473   2473       LD    (PRSW),A         ;SAVE CTR
0ea9  1e 04         2474   2474       LD    E,4              ;4 BIT SHIFT LOOP
0eab  79            2475   2475 PK3   LD    A,C              ;GET LOW BYTE
0eac  17            2476   2476       RLA                    ;ROTATE LEFT 1 BIT
0ead  4f            2477   2477       LD    C,A              ;REPLACE
0eae  78            2478   2478       LD    A,B              ;GET HIGH BYTE
0eaf  17            2479   2479       RLA                    ;ROTATE LEFT 1 BIT
0eb0  47            2480   2480       LD    B,A              ;REPLACE
0eb1  1d            2481   2481       DEC   E                ;DECR CTR
0eb2  c2 ab 0e      2482   2482       JP    NZ,PK3           ;LOOP
0eb5  79            2483   2483       LD    A,C              ;GET LOW
0eb6  b2            2484   2484       OR    D                ;PUT DIGIT IN RIGHT HALF OF BYTE
0eb7  4f            2485   2485       LD    C,A              ;REPLACE
0eb8  23            2486   2486       INC   HL               ;POINT NEXT BYTE
0eb9  c3 97 0e      2487   2487       JP    PK1              ;LOOP
                    2488   2488 ;
                    2489   2489 ;
                    2490   2490 ;
0ebc                2491   2491 SQUIS EQU   $
                    2492   2492 ;
                    2493   2493 ;COMPRESS THE EXPR STACK
                    2494   2494 ;TO ADDR IN HL
                    2495   2495 ;FROM ADDR IN DE
                    2496   2496 ;COUNT IN B
                    2497   2497 ;
0ebc  13            2498   2498 SQUI2 INC   DE               ;POINT NEXT SEND
0ebd  23            2499   2499       INC   HL               ;POINT NEXT RECEIVE
0ebe  1a            2500   2500       LD    A,(DE)           ;GET A CHAR
0ebf  77            2501   2501       LD    (HL),A           ;PUT IT DOWN
0ec0  05            2502   2502       DEC   B                ;DECR CTR
0ec1  c2 bc 0e      2503   2503       JP    NZ,SQUI2         ;LOOP
0ec4  c9            2504   2504       RET                    ;RETURN
                    2505   2505 ;
                    2506   2506 ;
0ec5                2507   2507 GTEMP EQU   $
                    2508   2508 ;
                    2509   2509 ;GETS FOUR BYTE TEMPORARY STORAGE AREA,
                    2510   2510 ;STORES THE FACC THERE,
                    2511   2511 ;PUTS ADDR OF AREA IN EXPR STACK (HL)
                    2512   2512 ;
0ec5  eb            2513   2513       EX    DE,HL            ;SAVE HL IN DE
0ec6  e3            2514   2514       EX    (SP),HL          ;EXCHANGE 0 AND RET ADDR
0ec7  e5            2515   2515       PUSH  HL               ;PUT NEW RET ADDR
0ec8  e5            2516   2516       PUSH  HL               ;DO IT AGAIN
0ec9  21 00 00      2517   2517       LD    HL,0             ;ZERO HL
0ecc  39            2518   2518       ADD   HL,SP            ;GET SP ADDR IN HL
0ecd  23            2519   2519       INC   HL               ;PLUS ONE
0ece  23            2520   2520       INC   HL               ;PLUS ONE MORE (POINT TO NEW ARE
Z80-Assembler		Release 1.6				Page 43
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0ecf  c5            2521   2521       PUSH  BC               ;SAVE CTRS
0ed0  d5            2522   2522       PUSH  DE               ;SAVE EXPR ADDR
0ed1  e5            2523   2523       PUSH  HL               ;SAVE TEMP ADDR
0ed2  3a 55 10      2524   2524       LD    A,(SPCTR)        ;GET WORD COUNTER
0ed5  3c            2525   2525       INC   A                ;INCR IT
0ed6  32 55 10      2526   2526       LD    (SPCTR),A        ;RESTORE IT
0ed9  f7            2527   2527       RST   RST6             ;GO STORE FACC
0eda  d1            2528   2528       POP   DE               ;RESTORE TEMP ADDR
0edb  e1            2529   2529       POP   HL               ;RESTORE EXPR ADDR
0edc  c1            2530   2530       POP   BC               ;RESTORE CTRS
0edd  23            2531   2531 SADR  INC   HL               ;POINT NEXT BYTE
0ede  72            2532   2532       LD    (HL),D           ;HIGH BYTE TO EXPR STACK
0edf  23            2533   2533       INC   HL               ;POINT NEXT
0ee0  73            2534   2534       LD    (HL),E           ;LOW BYTE TO EXPR STACK
0ee1  23            2535   2535       INC   HL               ;POINT NEXT
0ee2  36 e3         2536   2536       LD    (HL),0E3H        ;CODE = DATA
0ee4  c9            2537   2537       RET                    ;RETURN
                    2538   2538 ;
                    2539   2539 ;
0ee5                2540   2540 ALPHA EQU   $
                    2541   2541 ;
                    2542   2542 ;TESTS THE CHAR AT (HL)
                    2543   2543 ;RETURNS WITH Z SET IF CHAR IS ALPHA (A-Z)
                    2544   2544 ;RETURNS WITH Z OFF IF NOT ALPHA
                    2545   2545 ;CHAR IS LEFT IN REG A
                    2546   2546 ;
0ee5  cf            2547   2547       RST   RST1             ;SKIP LEADING SPACES
0ee6  fe 41         2548   2548       CP    'A'              ;TEST IF A OR HIGHER
0ee8  d8            2549   2549       RET   C                ;RETURN IF NOT ALPHA (Z IS OFF)
0ee9  fe 5b         2550   2550       CP    'Z'+1            ;TEST IF Z OR LESS
0eeb  d0            2551   2551       RET   NC               ;RETURN IF NOT < Z (Z OFF)
0eec  bf            2552   2552       CP    A                ;TURN ON Z
0eed  c9            2553   2553       RET                    ;RETURN
                    2554   2554 ;
                    2555   2555 ;
0eee                2556   2556 NUMER EQU   $
                    2557   2557 ;
                    2558   2558 ;TESTS THE CHAR AT (HL)
                    2559   2559 ;RETURNS WITH Z SET IF NUMERIC (0-9)
                    2560   2560 ;ELSE, Z IS OFF
                    2561   2561 ;CHAR IS LEFT IN THE A REG
                    2562   2562 ;
0eee  cf            2563   2563       RST   RST1             ;SKIP LEADING SPACES
0eef  fe 30         2564   2564 NUMXR CP    '0'              ;TEST IF ZERO OR GREATER
0ef1  d8            2565   2565       RET   C                ;RETURN IF LESS THAN ZERO
0ef2  fe 3a         2566   2566       CP    '9'+1            ;TEST IF 9 OR LESS
0ef4  d0            2567   2567       RET   NC               ;RETURN IF NOT NUMERIC
0ef5  bf            2568   2568       CP    A                ;SET Z
0ef6  c9            2569   2569       RET                    ;RETURN
                    2570   2570 ;
                    2571   2571 ;
0ef7                2572   2572 RIGHT EQU   $
                    2573   2573 ;
                    2574   2574 ;SHIFT THE LEFTMOST 4 BITS OF REG A RIGHT FOUR BITS
                    2575   2575 ;
0ef7  e6 f0         2576   2576       AND   0F0H             ;ISOLATE LEFT
0ef9  1f            2577   2577       RRA                    ;SHIFT ONCE
0efa  1f            2578   2578       RRA                    ;AGAIN
0efb  1f            2579   2579       RRA                    ;AGAIN
0efc  1f            2580   2580       RRA                    ;ONE LAST TIME
Z80-Assembler		Release 1.6				Page 44
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0efd  c9            2581   2581       RET                    ;RETURN
                    2582   2582 ;
                    2583   2583 ;
0efe                2584   2584 SEARC EQU   $
                    2585   2585 ;
                    2586   2586 ;SEARCES FOR THE VARIABLE IN DE
                    2587   2587 ;RETURNS WITH ADDR OF DATA AREA FOR VARIABLE
                    2588   2588 ;
0efe  e5            2589   2589       PUSH  HL               ;SAVE HL
0eff  2a 18 11      2590   2590       LD    HL,(DATAB)       ;GET ADDR OF DATA POOL
0f02  01 fa ff      2591   2591       LD    BC,-6            ;LENGTH OF EACH ENTRY
0f05  7e            2592   2592 SCH1  LD    A,(HL)           ;GET THE BYTE
0f06  b7            2593   2593       OR    A                ;TEST IF END
0f07  ca 1e 0f      2594   2594       JP    Z,SCH3           ;BRIF END
0f0a  ba            2595   2595       CP    D                ;COMPARE 1ST CHAR
0f0b  c2 1a 0f      2596   2596       JP    NZ,SCH2          ;BRIF NOT EQUAL
0f0e  2b            2597   2597       DEC   HL               ;POINT NEXT
0f0f  7e            2598   2598       LD    A,(HL)           ;LOAD 2ND DIGIT
0f10  23            2599   2599       INC   HL               ;POINT BACK
0f11  bb            2600   2600       CP    E                ;COMPARE 2ND CHAR
0f12  c2 1a 0f      2601   2601       JP    NZ,SCH2          ;BRIF NOT EQUAL
0f15  09            2602   2602       ADD   HL,BC            ;POINT NEXT ENTRY
0f16  23            2603   2603       INC   HL               ;PLUS ONE
0f17  eb            2604   2604       EX    DE,HL            ;FLIP/FLOP
0f18  e1            2605   2605       POP   HL               ;RESTORE HL
0f19  c9            2606   2606       RET                    ;RETURN
0f1a  09            2607   2607 SCH2  ADD   HL,BC            ;MINUS SIX
0f1b  c3 05 0f      2608   2608       JP    SCH1             ;LOOP
0f1e  72            2609   2609 SCH3  LD    (HL),D           ;PUT 1ST CHAR
0f1f  2b            2610   2610       DEC   HL               ;POINT NEXT
0f20  73            2611   2611       LD    (HL),E           ;PUT 2ND CHAR
0f21  06 04         2612   2612       LD    B,4              ;LOOP CTR
0f23  2b            2613   2613 SCH4  DEC   HL               ;POINT NEXT
0f24  36 00         2614   2614       LD    (HL),0           ;ZERO THE VALUE
0f26  05            2615   2615       DEC   B                ;DECR CTR
0f27  c2 23 0f      2616   2616       JP    NZ,SCH4          ;LOOP
0f2a  2b            2617   2617       DEC   HL               ;POINT NEXT
0f2b  70            2618   2618       LD    (HL),B           ;MOVE ZERO TO NEW END
0f2c  23            2619   2619       INC   HL               ;POINT ADDR OF VARIABLE
0f2d  eb            2620   2620       EX    DE,HL            ;PUT LOCATION TO DE
0f2e  e1            2621   2621       POP   HL               ;RESTORE HL
0f2f  c9            2622   2622       RET                    ;RETURN
                    2623   2623 ;
                    2624   2624 ;
0f30                2625   2625 VAR   EQU   $
                    2626   2626 ;
                    2627   2627 ;
                    2628   2628 ;TEST (HL) FOR A VARIABLE NAME
                    2629   2629 ;PUTS THE NAME IN DE IF FOUND
                    2630   2630 ;
0f30  cd e5 0e      2631   2631       CALL  ALPHA            ;TEST IF ALPHA
0f33  c2 7a 0e      2632   2632       JP    NZ,SNERR         ;BRIF NOT ALPHA
0f36  57            2633   2633       LD    D,A              ;FIRST CHAR
0f37  1e 20         2634   2634       LD    E,' '            ;DEFAULT
0f39  23            2635   2635       INC   HL               ;POINT NEXT
0f3a  cd ee 0e      2636   2636       CALL  NUMER            ;TEST IF NUMERIC
0f3d  c0            2637   2637       RET   NZ               ;RETURN IF NOT NUMERIC
0f3e  5f            2638   2638       LD    E,A              ;SAVE 2ND CHAR
0f3f  23            2639   2639       INC   HL               ;POINT NEXT
0f40  cf            2640   2640       RST   RST1             ;SKIP SPACES
Z80-Assembler		Release 1.6				Page 45
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0f41  c9            2641   2641       RET                    ;THEN RETURN
                    2642   2642 ;
                    2643   2643 ;
0f42                2644   2644 ERROR EQU   $
                    2645   2645 ;
                    2646   2646 ;CONTINUE ERROR ROUTINE (RST RST3)
                    2647   2647 ;
0f42  71            2648   2648       LD    (HL),C           ;PUT 2ND CHAR
0f43  23            2649   2649       INC   HL               ;POINT NEXT
0f44  36 fe         2650   2650       LD    (HL),0FEH        ;MARK END
0f46  cd f5 0d      2651   2651       CALL  TERMO            ;GO PRINT IT
0f49  21 e8 0f      2652   2652       LD    HL,ERRXR         ;POINT MESG
0f4c  cd f8 0d      2653   2653       CALL  OUT1             ;GO PRINT IT
0f4f  11 02 10      2654   2654       LD    DE,IOBUF         ;POINT BUFFER
0f52  2a 6a 10      2655   2655       LD    HL,(LINE)        ;GET ADDR OF LINE NUMBER
0f55  cd 1a 0e      2656   2656       CALL  LINEO            ;UNPACK LINE NUMBER
0f58  af            2657   2657       XOR   A                ;GET END CODE
0f59  12            2658   2658       LD    (DE),A           ;PUT TO BUFFER
0f5a  cd f5 0d      2659   2659       CALL  TERMO            ;PRINT IT
0f5d  c3 8d 00      2660   2660       JP    GETCM            ;GO GET NEXT COMMAND
                    2661   2661 *HEADING IMSAI 8080 4K BASIC
0f60  4c 49 53      2662   2662 LISTL DEFM  'LIS'
0f63  00            2663   2663       DEFB  0
0f64  4e 45 57      2664   2664 NEWLI DEFM  'NEW'
0f67  00            2665   2665       DEFB  0
0f68  52 55 4e      2666   2666 RUNLI DEFM  'RUN'
0f6b  00            2667   2667       DEFB  0
0f6c  52 4e 44      2668   2668 RNDLI DEFM  'RND'
0f6f  00            2669   2669       DEFB  0
0f70  41 42 53      2670   2670 ABSLI DEFM  'ABS'
0f73  00            2671   2671       DEFB  0
0f74  53 51 52      2672   2672 SQRLI DEFM  'SQR'
0f77  00            2673   2673       DEFB  0
0f78  53 47 4e      2674   2674 SGNLI DEFM  'SGN'
0f7b  00            2675   2675       DEFB  0
0f7c                2676   2676 JMPTB EQU   $
0f7c  49 46         2677   2677 IFLIT DEFM  'IF'
0f7e  00            2678   2678       DEFB  0
0f7f  a4 03         2679   2679       DEFW  IF
0f81  52 45 41 44   2680   2680 READL DEFM  'READ'
0f85  00            2681   2681       DEFB  0
0f86  eb 04         2682   2682       DEFW  READ
0f88  44 41 54 41   2683   2683 DATAL DEFM  'DATA'
0f8c  00            2684   2684       DEFB  0
0f8d  86 01         2685   2685       DEFW  RUN
0f8f  46 4f 52      2686   2686 FORLI DEFM  'FOR'
0f92  00            2687   2687       DEFB  0
0f93  ba 02         2688   2688       DEFW  FOR
0f95  4e 45 58 54   2689   2689 NEXTL DEFM  'NEXT'
0f99  00            2690   2690       DEFB  0
0f9a  2f 04         2691   2691       DEFW  NEXT
0f9c  47 4f 53 55   2692   2692 GOSUX DEFM  'GOSUB'
0fa0  42            2692   2693
0fa1  00            2693   2694       DEFB  0
0fa2  f3 01         2694   2695       DEFW  GOSUB
0fa4  52 45 54      2695   2696 RETLI DEFM  'RET'
0fa7  00            2696   2697       DEFB  0
0fa8  26 02         2697   2698       DEFW  RETUR
0faa  49 4e 50 55   2698   2699 INPUX DEFM  'INPUT'
0fae  54            2698   2700
Z80-Assembler		Release 1.6				Page 46
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
0faf  00            2699   2701       DEFB  0
0fb0  b2 04         2700   2702       DEFW  INPUT
0fb2  50 52         2701   2703 PRINX DEFM  'PR'
0fb4  49 4e 54      2702   2704 INTLI DEFM  'INT'
0fb7  00            2703   2705       DEFB  0
0fb8  33 02         2704   2706       DEFW  PRINT
0fba  3f            2705   2707       DEFM  '?'
0fbb  00            2706   2708       DEFB  0
0fbc  33 02         2707   2709       DEFW  PRINT
0fbe  47 4f         2708   2710 GOTOL DEFM  'GO'
0fc0  54 4f         2709   2711 TOLIT DEFM  'TO'
0fc2  00            2710   2712       DEFB  0
0fc3  fc 01         2711   2713       DEFW  GOTO
0fc5  4c 45 54      2712   2714 LETLI DEFM  'LET'
0fc8  00            2713   2715       DEFB  0
0fc9  1a 04         2714   2716       DEFW  LET
0fcb  53 54 4f      2715   2717 STOPL DEFM  'STO'
0fce  00            2716   2718       DEFB  0
0fcf  8d 00         2717   2719       DEFW  READY
0fd1  45 4e 44      2718   2720 ENDLI DEFM  'END'
0fd4  00            2719   2721       DEFB  0
0fd5  86 01         2720   2722       DEFW  RUN
0fd7  52 45 4d      2721   2723 REMLI DEFM  'REM'
0fda  00            2722   2724       DEFB  0
0fdb  86 01         2723   2725       DEFW  RUN
0fdd  00            2724   2726       DEFB  0                ;END OF TABLE
0fde  53 54 45 50   2725   2727 STEPL DEFM  'STEP'
0fe2  00            2726   2728       DEFB  0
0fe3  54 48 45 4e   2727   2729 THENL DEFM  'THEN'
0fe7  00            2728   2730       DEFB  0
0fe8  20 45 52 52   2729   2731 ERRXR DEFM  ' ERR @ '
0fec  20 40 20      2729   2732
0fef  fe            2730   2733       DEFB  0FEH
0ff0  00 10         2731   2734 ONE   DEFW  1000H            ;CONSTANT ONE
0ff2  00 00         2732   2735       DEFW  0
0ff4  00 20         2733   2736 TWO   DEFW  2000H            ;CONSTANT TWO
0ff6  00 00         2734   2737       DEFW  0
0ff8  00 30         2735   2738 THREE DEFW  3000H            ;CONSTANT THREE
0ffa  00 00         2736   2739       DEFW  0
0ffc  7f 83         2737   2740 RNDX  DEFW  837FH            ;RANDOMIZER
0ffe  74 19         2738   2741       DEFW  1974H
1000                2739   2742 ROMEN EQU   $                ;END OF READ-ONLY-MEMORY
                    2740   2743 *HEADING IMSAI 8080 4K BASIC
                    2741   2744       ORG   1000H            ;RAM AREA
1000                2742   2745 RAM   EQU   $                ;ALIGN RAM ON 4K BOUNDARY
0002                2743   2746 TTY   EQU   2                ;DEVICE ADDRESS FOR TERMINAL
1000                2744   2747 NULLI DEFS  2
1002                2745   2748 IOBUF DEFS  40               ;INPUT/OUTPUT BUFFER
102a                2746   2749 FACC  DEFS  4
102e                2747   2750 FTEMP DEFS  10
1038                2748   2751 REL   DEFS  1                ;HOLDS THE RELATION IN AN IF STMT
1039                2749   2752 DIVSW DEFS  1                ;0=NORMAL DIVIDE, 1=DIVIDE FOR R
103a                2750   2753 TVAR1 DEFS  4                ;TEMP STORAGE
103e                2751   2754 TVAR2 DEFS  4                ;DITTO
1042                2752   2755 ORIGS DEFS  4                ;HOLDS ORIG NUMBER FOR SQR
1046                2753   2756 TSTSQ DEFS  4                ;HOLDS TRIAL SQUARE ROOT
104a                2754   2757 TST2S DEFS  4                ;HOLDS TRIAL SQUARE ROOT ** 2
104e                2755   2758 SQRX  DEFS  4                ;TEMP STORAGE FOR SQUARE ROOT
1052                2756   2759 EXPRS DEFS  2                ;HOLDS ADDR OF EXPR
1054                2757   2760 PARCT DEFS  1
Z80-Assembler		Release 1.6				Page 47
Source file: basic4k.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
1055                2758   2761 SPCTR DEFS  1
1056                2759   2762 PRSW  DEFS  1
1057                2760   2763 ADDR1 DEFS  2                ;HOLDS TEMP ADDRESS
1059                2761   2764 ADDR2 DEFS  2                ;HOLDS TEMP ADDRESS
105b                2762   2765 ADDR3 DEFS  2                ;HOLDS STMT ADDRESS DURING EXPR
105d                2763   2766 STMT  DEFS  2                ;HOLDS ADDR OF CURRENT STATEMENT
105f                2764   2767 INDX  DEFS  2                ;HOLDS VARIABLE NAME OF FOR/NEXT
1061                2765   2768 OUTSW DEFS  1                ;OUTPUT SUPPRESS IF ON
1062                2766   2769 RUNSW DEFS  1                ;0=RUN MODE, 1=IMMEDIATE MODE
1063                2767   2770 COLUM DEFS  1                ;CURRENT TTY COLUM
1064                2768   2771 RNDNU DEFS  4
1068                2769   2772 DASTM DEFS  2                ;HOLDS LINE ADDRESS OF CURRENT D
106a                2770   2773 LINE  DEFS  2                ;HOLD ADDR OF PREV LINE NUM
106c                2771   2774 STACK DEFS  2                ;HOLDS ADDR OF START OF RETURN
106e                2772   2775 FORNE DEFS  97
10cf                2773   2776 PROMP DEFS  1                ;HOLDS PROMPT CHARACTER
10d0                2774   2777 IMMED DEFS  70               ;IMMEDIATE COMMAND STORAGE AREA
1116                2775   2778 DATAP DEFS  2                ;ADDR OF CURRENT DATA STMT
1118                2776   2779 DATAB DEFS  2                ;ADDRESS OF DATA POOL
111a                2777   2780 PROGE DEFS  2                ;ADDR OF PROG POOL END
111c                2778   2781       DEFS  1                ;THIS HAS LOW VALUE AT RUN TIME
111d                2779   2782 BEGPR EQU   $                ;PROGRAM AREA STARTS HERE
                    2780   2783 ;
                    2781   2784 ;
111d                2782   2785       END   BASIC
Z80-Assembler		Release 1.6				Page 48
Source file: basic4k.asm
Title:       Symboltable

ABS      0a04	ABSLI    0f70	ADDR1    1057	ADDR2    1059	
ADDR3    105b	ALPHA    0ee5	BASIC    0000	BEGPR    111d	
COLUM    1063	COMP2    0e67	CONTI    0049	CONTO    0e45	
CONTX    01a3	COPYD    0e61	COPYH    0e58	CR1      0d8b	
CRLF     0dba	DAERR    0e82	DASTM    1068	DATAB    1118	
DATAL    0f88	DATAN    04fc	DATAP    1116	DATOK    0526	
DELAY    0dcb	DIVSW    1039	EDIT1    00a8	EDIT2    00b9	
EDIT3    00d9	EDIT4    00e5	EDIT5    00f2	EDIT6    0107	
EDIT7    0113	EDITX    00ed	ENDLI    0fd1	ERROR    0f42	
ERRXR    0fe8	EV0      0c52	EV1      0c55	EV10     0d0f	
EV11     0d3a	EV2      0c65	EV3      0c80	EV5      0cb0	
EV6      0ccf	EV7      0ce8	EV9      0cef	EVAL     0c4f	
EXEC     0123	EXPR     0aef	EXPRS    1052	FACC     102a	
FADD     06d2	FADD1    0762	FADD3    06f3	FADD4    06fe	
FADD6    0723	FADD7    0725	FADD9    0732	FADDJ    0d21	
FADDT    09d8	FADX1    0749	FADX2    076a	FADXT    09d9	
FDIV     08d0	FDIV1    0986	FDIV3    08fe	FDIV5    0916	
FDIV7    0918	FDIVJ    0d36	FDIX1    0936	FDIX2    097e	
FEXP     09ac	FEXP1    09b2	FIN      0544	FIN12    05b6	
FIN13    05b7	FIN14    05bc	FIN15    05d8	FIN16    05ef	
FIN17    05f0	FIN18    05f4	FIN19    05f7	FIN2     055d	
FIN20    0605	FIN3     055f	FIN4     0564	FIN5     0577	
FIN6     0581	FIN7     058c	FIN8     058e	FIN9     059e	
FINDL    0052	FMUL     07e2	FMUL1    0808	FMUL5    0830	
FMUL6    083f	FMUL7    084a	FMUL8    084d	FMUL9    0855	
FMULJ    0d2f	FMUX1    0864	FMUX2    087d	FMUX3    08b1	
FMUX4    088a	FMUX5    08c0	FNOR1    07a5	FNOR2    07ac	
FNORM    0790	FOERR    0e86	FOR      02ba	FOREQ    0347	
FORLI    0f8f	FORLP    0334	FORN1    039c	FORNE    106e	
FORNO    0340	FORPO    031e	FORST    02f9	FORTA    0324	
FORXE    0312	FOUT     0607	FOUT1    0614	FOUT2    0625	
FOUT3    062e	FOUT4    0651	FOUT5    0655	FOUT6    066e	
FOUT7    0672	FOUT8    0675	FOUT9    068d	FOVUN    098f	
FOVUX    0998	FOX1     0698	FOX2     06ac	FOX3     0699	
FOX4     06a5	FOX5     06ba	FOX6     06c4	FROUN    08ba	
FSHFT    09e4	FSHFX    09f4	FSUB     07cb	FSUBJ    0d28	
FSUBT    09b4	FSUX1    09b5	FSUX2    09c4	FSUX3    09cd	
FTEMP    102e	FTEST    099e	GENRN    0083	GETCH    0e33	
GETCM    008d	GOSUB    01f3	GOSUX    0f9c	GOTO     01fc	
GOTO1    0202	GOTO2    021e	GOTOL    0fbe	GTEMP    0ec5	
IF       03a4	IFEQ     03b9	IFGT     03c1	IFLIT    0f7c	
IFLT     03cb	IFNOT    03f1	IFNTX    03ff	IFREL    03b0	
IMED     0159	IMMD     01a2	IMMED    10d0	IN1      04bc	
IN2      04d7	INDX     105f	INPUT    04b2	INPUX    0faa	
INSOP    0c1c	INT      0a1d	INT2     0a2b	INT3     0a39	
INTLI    0fb4	IOBUF    1002	JMPTB    0f7c	LDALP    0b17	
LDDTN    0baa	LDDTP    0bb7	LDF      0b07	LDFN     0b41	
LDFN1    0b47	LDFNC    0b97	LDNUM    0b04	LDRND    0b8e	
LDVR1    0b2e	LET      041a	LETLI    0fc5	LINE     106a	
LINEO    0e1a	LIST     01d3	LISTL    0f60	LISTX    01d6	
LNEXT    036e	LOOKD    0afe	LOOKO    0bd2	LOUT     0e1d	
MEMEN    005f	NEG      0ac7	NEWLI    0f64	NEXT     042f	
NEXTL    0f95	NEXTS    0190	NEXTZ    04ab	NOJMP    01c1	
NOSTP    02fc	NOTBS    0df1	NOTCO    0537	NOTCR    0dd6	
NOTDO    019c	NOTDT    051c	NOTSC    013c	NULLI    1000	
NUMER    0eee	NUMXR    0eef	NXEQ     0456	NXERR    0e8a	
NXLP     0442	NXNE     044d	NXTNE    048f	NXTPO    0488	
NXTZR    0493	ONE      0ff0	OP1      0bf9	OP1L1    0c00	
OP1L2    0c14	OP1L3    0c18	OP2      0c2c	OP2A     0c33	
OP3      0c41	ORIGS    1042	OUT1     0df8	OUT2     0e07	
OUT4     0e16	OUTSW    1061	OVERR    0e72	PACK     0e8e	
PARCT    1054	PK1      0e97	PK3      0eab	PR1      0237	
Z80-Assembler		Release 1.6				Page 49
Source file: basic4k.asm
Title:       Symboltable

PR2      0240	PR3      0246	PR4      0257	PR5      0261	
PR6      0266	PR7      0287	PR8      02ad	PRINT    0233	
PRINX    0fb2	PRNXT    024c	PROGE    111a	PROMP    10cf	
PRSW     1056	RAM      1000	READ     04eb	READL    0f81	
READY    008d	REIN     0d61	REL      1038	REMLI    0fd7	
RETLI    0fa4	RETUR    0226	RIGHT    0ef7	RND      0ad1	
RNDLI    0f6c	RNDNU    1064	RNDX     0ffc	ROMEN    1000	
RST1     0008	RST2     0010	RST3     0018	RST4     0020	
RST5     0028	RST6     0030	RST7     0038	RST7A    0046	
RTERR    0e7e	RUN      0186	RUNIT    016d	RUNLI    0f68	
RUNSW    1062	SADR     0edd	SCH1     0f05	SCH2     0f1a	
SCH3     0f1e	SCH4     0f23	SEARC    0efe	SGN      0a0d	
SGNLI    0f78	SNERR    0e7a	SPCTR    1055	SQR      0a47	
SQRGO    0ac2	SQRGX    0ac5	SQRLI    0f74	SQRLP    0a5e	
SQRX     104e	SQUI2    0ebc	SQUIS    0ebc	STACK    106c	
STEPL    0fde	STERR    0e76	STMT     105d	STOPL    0fcb	
TABEN    01cd	TABLO    01ac	TBEND    02b4	TBLP     0291	
TBLP2    0298	TBON     029d	TBSPA    02a2	TERMI    0d59	
TERMO    0df5	TESTI    0d9d	TESTO    0da5	THENL    0fe3	
THREE    0ff8	TOLIT    0fc0	TOUT1    0dad	TOUT2    0db8	
TREAD    0d73	TRUE     0410	TST2S    104a	TSTCH    0e2e	
TSTSQ    1046	TTY      0002	TVAR1    103a	TVAR2    103e	
TWO      0ff4	ULERR    0e6e	VAR      0f30	ZEROM    0e50	
